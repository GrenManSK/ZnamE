{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment ZnamE  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
v0.1.2-alpha+build.20221025.143950 \par
}}ZnamE}
{\comment Generated by doxygen 1.9.5.}
{\creatim \yr2022\mo10\dy25\hr14\min40\sec39}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt ZnamE}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version v0.1.2-alpha+build.20221025.143950\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt Tue Oct 25 2022 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Contributor Covenant Code of Conduct{\tc \v Contributor Covenant Code of Conduct}\par \pard\plain 
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Our Pledge
\par}
{\tc\tcl2 \v Our Pledge}
We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\par
We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\par}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Our Standards
\par}
{\tc\tcl2 \v Our Standards}
Examples of behavior that contributes to a positive environment for our community include:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Demonstrating empathy and kindness toward other people\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Being respectful of differing opinions, viewpoints, and experiences\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Giving and gracefully accepting constructive feedback\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Focusing on what is best not just for us as individuals, but for the overall community\par}
\par
Examples of unacceptable behavior include:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
The use of sexualized language or imagery, and sexual attention or advances of any kind\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Trolling, insulting or derogatory comments, and personal or political attacks\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Public or private harassment\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Publishing others' private information, such as a physical or email address, without their explicit permission\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Other conduct which could reasonably be considered inappropriate in a professional setting\par}
\par
\par}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Enforcement Responsibilities
\par}
{\tc\tcl2 \v Enforcement Responsibilities}
Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\par
Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\par}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Scope
\par}
{\tc\tcl2 \v Scope}
This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\par}
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Enforcement
\par}
{\tc\tcl2 \v Enforcement}
Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at {\f2 melnicek.richard@gmail.com}. All complaints will be reviewed and investigated promptly and fairly.\par
All community leaders are obligated to respect the privacy and security of the reporter of any incident.\par}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Enforcement Guidelines
\par}
{\tc\tcl2 \v Enforcement Guidelines}
Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
1. Correction
\par}
{\tc\tcl3 \v 1. Correction}
{\b Community Impact} : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\par
{\b Consequence} : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\par}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
2. Warning
\par}
{\tc\tcl3 \v 2. Warning}
{\b Community Impact} : A violation through a single incident or series of actions.\par
{\b Consequence} : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\par}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
3. Temporary Ban
\par}
{\tc\tcl3 \v 3. Temporary Ban}
{\b Community Impact} : A serious violation of community standards, including sustained inappropriate behavior.\par
{\b Consequence} : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\par}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{{\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
4. Permanent Ban
\par}
{\tc\tcl3 \v 4. Permanent Ban}
{\b Community Impact} : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\par
{\b Consequence} : A permanent ban from any sort of public interaction within the community.\par}
\par}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Attribution
\par}
{\tc\tcl2 \v Attribution}
This Code of Conduct is adapted from the {\f2 Contributor Covenant}, version 2.0, available at {\f2 https://www.contributor-covenant.org/version/2/0/code_of_conduct.html}.\par
Community Impact Guidelines were inspired by {\f2 Mozilla's code of conduct enforcement ladder}.\par
For answers to common questions about this code of conduct, see the FAQ at {\f2 https://www.contributor-covenant.org/faq}. Translations are available at {\f2 https://www.contributor-covenant.org/translations}. \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
ZnamE{\tc \v ZnamE}\par \pard\plain 
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Using {\f2 https://github.com/awaken1ng/krkr-xp3} as extraction tool\par
Size installed of required modules: 62.81 MB\par
Test login credentials: PID: 426738 Password: 123456 \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Index\par \pard\plain 
{\tc \v Namespace Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Namespace List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all namespaces with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b edupage} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b uninstall} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACT \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b edupage.py} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b uninstall.py} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Namespace Documentation\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
edupage Namespace Reference\par \pard\plain 
{\tc\tcl2 \v edupage}
{\xe \v edupage}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b getWindow} (Times)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b getImg} (imgSrc, name, x=None, y=None, width=None, length=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b move} (window, x, y, width, length)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b delcache} (name, hist)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b inactive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b progress_bar} (name, number)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b add} (name, ico, subject, mark)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b decode} (name, {\b password}, {\b mode}=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b password} (name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b find} (name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b code} (name, new, {\b mode}=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b mouseclick} (time=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b playhtml} (htmlFile, {\b mode}=0, time=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b main} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b config} = configparser.RawConfigParser()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b parser} = argparse.ArgumentParser()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b UNSPECIFIED} = object()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
list {\b language} = ['SK','EN','JP']\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b choices}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b nargs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b args} = parser.parse_args()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b timeout} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b potrebne} = \{'psutil', 'numpy','tqdm', 'semantic-version','screeninfo','opencv-python','glob2','keyboard','pywin32', 'pywinauto'\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b nainstalovane} = \{pkg.key for pkg in pkg_resources.working_set\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b nenajdene} = {\b potrebne} - {\b nainstalovane}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b verzia} = open('version', '{\b r}')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b user32} = ctypes.windll.user32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b screensize} = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b screensizepercentage} = float((1/1920)*{\b screensize}[0]), float((1/1080)*{\b screensize}[1])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b updateapp} = str('import argparse, shutil, os, subprocess, configparser, sys\\nfrom time import sleep\\nUNSPECIFIED = object()\\nglobal parser\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-ef\\', \\'--endf\\', {\b help}=\\'Will not automatically end program\\', {\b default}={\b UNSPECIFIED}, {\b nargs}=\\'?\\')\\nparser.add_argument(\\'-lang\\', \\'--language\\', {\b choices}=[\\'SK\\',\\'EN\\',\\'JP\\'], {\b help}=\\'Language selection\\', {\b nargs}=\\'?\\')\\nparser.add_argument(\\'input\\', {\b help}=\\'Input folder\\', {\b nargs}=\\'?\\')\\{\b nargs} = parser.parse_args()\\nconfig = configparser.RawConfigParser()\\nconfig.read(\\'config.ini\\')\\nargs.language = config.get(\\'basic info\\', \\'lang\\').split(\\' \\')[0]\\nif args.input != "":\\n sleep(0.5)\\n shutil.move(\\'edupage.py\\', \\'old/edupage.py\\')\\n shutil.move(args.input + \\'/edupage.py\\', \\'edupage.py\\')\\n sleep(0.2)\\n shutil.rmtree(args.input)\\n shutil.rmtree(\\'old\\')\\n if args.endf == None:\\n subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -endf -update\\', {\b shell}=True)\\n else:\\n subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -update\\', {\b shell}=True)\\n quit()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b url} = 'https://raw.githubusercontent.com/GrenManSK/ZnamE/{\b main}/version'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b page} = requests.get({\b url})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b r} = requests.get({\b url})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b filename} = "new.zip"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b mode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b iterable}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b total}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b desc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b directory} = None\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b crupdate} = open("update.py", "w")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b shell}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b codeapp} = str('import sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'\\"\\', \\"`\\"], [\\n \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n obsah = \\"\\"\\n obsah_list = []\\n for i in file:\\n obsah = \\"\\"\\n obsah += i\\n for i in obsah:\\n i.lower()\\n obsah_list.append(i)\\n return obsah_list\\ndef encode(obsah):\\n sifra = []\\n for i in obsah:\\n riadok = 0\\n stlpec = 0\\n while True:\\n if riadok == 19 and stlpec == 0:\\n break\\n if i == PLOCHA[riadok][stlpec]:\\n sifra.append(str(riadok) + \\" \\" + str(stlpec))\\n break\\n if stlpec == 4:\\n riadok += 1\\n stlpec = 0\\n else:\\n stlpec += 1\\n return sifra\\ndef output_file(file, name):\\n y = []\\n x = open(name + \\"crypted\\", \\"w\\")\\n for i in file:\\n y.append(i)\\n x.write(str(y))\\n x.close\\n return\\ndef {\b main}():\\n name = sys.argv[1]\\n open_file = open(name, \\"r\\")\\n open_file.close\\n output_file(encode(read_file(open_file)), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b decodeapp} = str('import os\\nos.system(\\'Title \\' + \\'code\\')\\nimport sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'"\\', \\"`"], [\\n \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n obsah = \\"\\"\\n obsah_list = []\\n for i in file:\\n obsah += i\\n for i in obsah:\\n obsah_list.append(i)\\n return obsah_list\\ndef {\b decode}(obsah):\\n done = \\"\\"\\n sifra = []\\n for i in obsah:\\n done += str(i)\\n if i == \\"[\\" or i == \\"\\'\\" or i == \\",\\" or i == \\"]\\":\\n done = \\"\\"\\n continue\\n if i == \\" \\":\\n sifra.append(i)\\n else:\\n sifra.append(i)\\n return sifra\\ndef real_decode(obsah):\\n cislo = 0\\n pokracovanie = False\\n done = \\"\\"\\n vysledok = []\\n for i in obsah:\\n done += str(i)\\n cislo = 0\\n for i in done:\\n cislo += 1\\n if i == \\" \\":\\n done = \\"\\"\\n continue\\n if pokracovanie and done.isnumeric() and cislo == 1:\\n stlpec = int(done)\\n vysledok.append(PLOCHA[riadok][stlpec])\\n pokracovanie = False\\n done = \\"\\"\\n continue\\n if not pokracovanie or cislo == 2:\\n pokracovanie = True\\n riadok = int(done)\\n continue\\n return vysledok\\ndef to_text(obsah):\\n text = \\"\\"\\n for i in obsah:\\n if i == \\".\\":\\n text += i + \\"\\\\n\\"\\n continue\\n text += i\\n return text\\ndef create_file(obsah, name):\\n x = open(sys.argv[1], \\"w\\")\\n x.write(obsah)\\n x.close\\n return\\ndef {\b main}():\\n if sys.argv[2] == \\'False\\':\\n name = \\'data\\'\\n else:\\n name = sys.argv[2]\\n open_file = open(name, \\"r\\")\\n {\b code} = list({\b decode}(read_file(open_file)))\\n create_file(to_text(real_decode({\b code})), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b findapp} = str('import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nfor i in dnr:\\n if rnii:\\n wh=True\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if passend:\\n user.write({\b password}+\\'\\\\n\\')\\n passend=False\\n if ik:\\n if i!="," and bracket==4 and brackethist==4:\\n user.write(i)\\n if bracket==3:\\n subject=\\'\\'\\n ik=False\\n rniiend=False\\n user.write(\\"\\\\n\\")\\n if rniiend:\\n user.write(subject)\\n ik=True\\n rniiend=False\\n brackethist=bracket\\n continue\\n if userdef:\\n userdef=False\\n user=open(str(ico[0]),\\'w\\')\\n if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n rniiend=True\\n continue\\n subject+=str(i)\\n elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n passend=True\\n continue\\n {\b password}+=str(i)\\n brackethist=bracket\\n if bracket<2 and brackethist<2:\\n break\\n else:\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if icoend:\\n if icocurrent!=\\'\\':\\n if int(icocurrent)==icofind:\\n ico.append(icocurrent)\\n rnii=True\\n continue\\n icocurrent=\\'\\'\\n icoend=False\\n if bracket==2 and brackethist==2:\\n if i ==\\',\\':\\n icoend=True\\n userdef=True\\n continue\\n icocurrent+=i\\n brackethist=bracket\\nif not wh:\\n user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b passwordapp} = str('import sys\\ndecodename=str(sys.argv[1])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.readlines()\\ntry:\\n number=int(dnr[0])\\n number=str(dnr[0])\\n number=dnr[0][:6]\\nexcept Exception:\\n number=None\\nx=open(\\'DONE\\',\\'w\\')\\nx.write(number)\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b addapp} = str('import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\nsubjectfind = sys.argv[3]\\nmarkadd = sys.argv[4]\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nik2=False\\nadd=False\\nuser=open(\\'data1\\',\\'w\\', newline=\\'\\')\\nfor i in dnr:\\n user.write(i)\\n if rnii:\\n wh=True\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if {\b add} and subject==subjectfind and bracket==4 and brackethist==4:\\n subjectfind=None\\n user.write(str(markadd) + \\',\\')\\n {\b add}=False\\n if passend:\\n passend=False\\n if ik:\\n if ik2:\\n ik2=False\\n {\b add}=True\\n if bracket==3:\\n subject=\\'\\'\\n ik=False\\n rniiend=False\\n if rniiend:\\n ik=True\\n ik2=True\\n rniiend=False\\n brackethist=bracket\\n continue\\n if userdef:\\n userdef=False\\n if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n rniiend=True\\n continue\\n subject+=str(i)\\n elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n passend=True\\n continue\\n {\b password}+=str(i)\\n brackethist=bracket\\n else:\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if icoend:\\n if icocurrent!=\\'\\':\\n if int(icocurrent)==icofind:\\n ico.append(icocurrent)\\n rnii=True\\n continue\\n icocurrent=\\'\\'\\n icoend=False\\n if bracket==2 and brackethist==2:\\n if i ==\\',\\':\\n icoend=True\\n userdef=True\\n continue\\n icocurrent+=i\\n brackethist=bracket\\nif not wh:\\n user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b restartapp} = str('import argparse, time\\nimport pyautogui as pg\\nUNSPECIFIED = object()\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-al\\',\\'--autol\\', {\b choices}=[], {\b default}={\b UNSPECIFIED}, {\b nargs}=\\'?\\')\\{\b nargs} = parser.parse_args()\\ntime.sleep(6)\\npg.write("login\\\\n")\\ntime.sleep(1)\\nif args.autol == None:\\n pg.write("\\\\n")')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b loginvstupuser} = ''\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b progress_bar_check} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b progress_bar_end} = False\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b cachename} = 'data.xp2'\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Read the config file (ini) and print the contents.\par
@param config - the config file itself\par
@returns nothing\par
}
 \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v add\:edupage}
{\xe \v edupage\:add}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.add (  {\i name},   {\i ico},   {\i subject},   {\i mark})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The add function adds a new subject to the database.\par
It takes 4 arguments: name, ico, subject and mark.\par
The name argument is the name of the school or college that you want to add as a string.\par
The ico argument is an integer representing your school's ICO number (the first 6 digits of your student ID).\par
The subject argument is a string containing what you want to be written in the &quot;predmet&quot; column in our database (e.g.: &quot;Matematika&quot;). The mark argument should be an integer between 1 and 5 inclusive.\par
\par
:param name: Name the file\par
:param ico: Check if the student already exists in the database\par
:param subject: Specify the subject of the student\par
:param mark: Specify the mark of the student\par
:return: The tuple (data, none)\par
}
 \par
}{
Definition at line {\b 462} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_ae4a9cabaf4c03e341b57bba83ce101db_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v code\:edupage}
{\xe \v edupage\:code}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.code (  {\i name},   {\i new},   {\i mode} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The code function is used to encrypt files.\par
It takes two arguments: name, new.\par
name is the file that will be encrypted.\par
new is the password for encryption.\par
\par
:param name: Get the name of the file to be encrypted\par
:param new: Save the new password\par
:param mode=0: Encrypt the file\par
:return: The name of the file and the new value\par
}
 \par
}{
Definition at line {\b 666} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a9f2fb33498a6ca319dbf12173811ed98_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v decode\:edupage}
{\xe \v edupage\:decode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.decode (  {\i name},   {\i password},   {\i mode} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The decode function takes two arguments, name and password. If the name argument is not provided it will default to None.\par
If the password argument is not provided it will default to None as well. The function then creates a file with the current time in its name and writes a python script into that file which decrypts all files in this directory (except for itself) using pyAesCrypt library with given password or generated one if none was given.\par
\par
:param name: Specify the name of the file to be decoded\par
:param password: Encrypt the file with a password\par
:param mode=0: Encode the file, mode=0 is used to decode the file\par
:return: The value of the name variable, if it is not none\par
}
 \par
}{
Definition at line {\b 511} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a81eee952198f84436e037b0a0da72224_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v delcache\:edupage}
{\xe \v edupage\:delcache}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.delcache (  {\i name},   {\i hist})}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The delcache function deletes the cache file if it is empty.\par
\par
\par
:param name: Name the file that is used to store the time\par
:param hist: Check if the history file has changed\par
:return: The value of the timer\par
}
 \par
}{
Definition at line {\b 359} of file {\b edupage.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a16e7d4c2c6bcf9d97a85dbe77e17bc45_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v find\:edupage}
{\xe \v edupage\:find}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.find (  {\i name})}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 613} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a0043cc90f496c13cd426dc0917cb8676_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getImg\:edupage}
{\xe \v edupage\:getImg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.getImg (  {\i imgSrc},   {\i name},   {\i x} = {\f2 None},   {\i y} = {\f2 None},   {\i width} = {\f2 None},   {\i length} = {\f2 None})}}
\par
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The getImg function displays an image from the source. If x, y, width, and length are specified, then the image will be displayed at those coordinates with the specified width and length. Otherwise, the image will be displayed at the default coordinates and default width and length.\par
\par
:param imgSrc: Specify the source of the image\par
:param name: Name the window\par
:param x=None: Specify the x coordinate of the window\par
:param y=None: Specify the y coordinate of the window\par
:param width=None: Specify the width of the window\par
:param length=None: Set the length of the window to its default value\par
:return: The image that is displayed\par
}
 \par
}{
Definition at line {\b 186} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_acd370e8dab693a3c7c8cb2394f8b1c6e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v getWindow\:edupage}
{\xe \v edupage\:getWindow}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.getWindow (  {\i Times})}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The getWindow function is used to get the window that we want to use.\par
It takes in a parameter called Times which is used for the number of times \par
that we want to press tab and alt. The function will first open up a fullscreen \par
window with an image, then it will press Alt+Tab so that you can switch windows, \par
and then it will close out of the full screen window and return back into your previous window.\par
\par
:param Times: Determine if the window is to be closed or not\par
:return: The window that the program is currently on\par
}
 \par
}{
Definition at line {\b 149} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a776b999c109882652c2802d5b61b37ac_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v inactive\:edupage}
{\xe \v edupage\:inactive}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.inactive ()}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The inactive function is used to check if the INACTIVE file exists in the current directory. If it does, then it will remove the password file and return True. Otherwise, it returns False.\par
\par
:return: True if the file inactive is found in the directory\par
}
 \par
}{
Definition at line {\b 411} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a3e074bd63c4b44876caa6dfa778fd91e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v main\:edupage}
{\xe \v edupage\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.main ()}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The main function. This is where the program starts. It is the first function called.\par
}
 \par
}{
Definition at line {\b 804} of file {\b edupage.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a240e099b4f4af78499fc545e1ab2ecea_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a240e099b4f4af78499fc545e1ab2ecea_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v mouseclick\:edupage}
{\xe \v edupage\:mouseclick}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.mouseclick (  {\i time} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The mouseclick function is used to click the F11 key on the keyboard.\par
This function is useful for maximizing a window.\par
\par
:param time=0: Make the mouseclick function run for a specified amount of time\par
:return: The time it takes to click the mouse\par
}
 \par
}{
Definition at line {\b 731} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_abbe737a479310cba2f68127eb6bb670f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v move\:edupage}
{\xe \v edupage\:move}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.move (  {\i window},   {\i x},   {\i y},   {\i width},   {\i length})}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The move function moves the specified window to a specified location.\par
The move function takes four arguments:\par
    1) The name of the window as a string. This is case sensitive and should be enclosed in quotation marks if it contains spaces or special characters (e.g., &quot;Microsoft Word&quot;). \par
    2) The x-coordinate of the desired location on your screen, measured in pixels from the left edge of your screen to where you want your window located (e.g., 100). \par
    3) The y-coordinate of the desired location on your screen, measured in pixels from the top edge of your screen\par
\par
:param window: Specify the window name\par
:param x: Set the x position of the window, y is used to set the y position\par
:param y: Move the window to the top of your screen\par
:param width: Set the width of the window\par
:param length: Set the height of the window\par
:return: The window handle of the specified application\par
}
 \par
}{
Definition at line {\b 227} of file {\b edupage.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_ad3afb6aca23b9c2f5a17dfead6f08920_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_ad3afb6aca23b9c2f5a17dfead6f08920_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v password\:edupage}
{\xe \v edupage\:password}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.password (  {\i name})}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid Create a password file for the current session.\par
@param name - the name of the file to be created.\par
}
 \par
}{
Definition at line {\b 573} of file {\b edupage.py}.}\par
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_a93a40ace672019acb1ed8bd6f7c9a9b2_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v playhtml\:edupage}
{\xe \v edupage\:playhtml}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.playhtml (  {\i htmlFile},   {\i mode} = {\f2 0},   {\i time} = {\f2 0})}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The playhtml function is used to open the html file containing the game's intro.\par
It can be called in two ways:\par
    1) playhtml(htmlFile, mode=0, time=0):  # mode = 0 means that it will click through all of the intro automatically. \par
                                            # time = 0 means that it will not wait for a specific amount of time before clicking\par
                                            # through each part of the intro.\par
\par
:param htmlFile: Specify which html file to open\par
:param mode=0: Determine whether the function is used to start a new game or load an existing one\par
:param time=0: Make the mouseclick function wait a certain amount of time\par
:return: Nothing\par
:doc-author: Trelent\par
}
 \par
}{
Definition at line {\b 753} of file {\b edupage.py}.}\par
Here is the call graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_aa2119f61a68f401d65ae4cab60bd59e3_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
Here is the caller graph for this function:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "d0/d52/namespaceedupage_aa2119f61a68f401d65ae4cab60bd59e3_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v progress_bar\:edupage}
{\xe \v edupage\:progress_bar}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
def edupage.progress_bar (  {\i name},   {\i number})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\par
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid The progress_bar function is a function that takes in two parameters: name and number.\par
The progress_bar function will print out the name of the task being executed, and then display a progress bar for how \par
far along it is to completion. The progress bar will be displayed as 100% if number = 1,000,000 or more.\par
\par
:param name: Give the progress bar a name\par
:param number: Determine the number of iterations\par
:return: The progress bar\par
}
 \par
}{
Definition at line {\b 434} of file {\b edupage.py}.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v addapp\:edupage}
{\xe \v edupage\:addapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.addapp = str('import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\nsubjectfind = sys.argv[3]\\nmarkadd = sys.argv[4]\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nik2=False\\nadd=False\\nuser=open(\\'data1\\',\\'w\\', newline=\\'\\')\\nfor i in dnr:\\n user.write(i)\\n if rnii:\\n wh=True\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if {\b add} and subject==subjectfind and bracket==4 and brackethist==4:\\n subjectfind=None\\n user.write(str(markadd) + \\',\\')\\n {\b add}=False\\n if passend:\\n passend=False\\n if ik:\\n if ik2:\\n ik2=False\\n {\b add}=True\\n if bracket==3:\\n subject=\\'\\'\\n ik=False\\n rniiend=False\\n if rniiend:\\n ik=True\\n ik2=True\\n rniiend=False\\n brackethist=bracket\\n continue\\n if userdef:\\n userdef=False\\n if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n rniiend=True\\n continue\\n subject+=str(i)\\n elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n passend=True\\n continue\\n {\b password}+=str(i)\\n brackethist=bracket\\n else:\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if icoend:\\n if icocurrent!=\\'\\':\\n if int(icocurrent)==icofind:\\n ico.append(icocurrent)\\n rnii=True\\n continue\\n icocurrent=\\'\\'\\n icoend=False\\n if bracket==2 and brackethist==2:\\n if i ==\\',\\':\\n icoend=True\\n userdef=True\\n continue\\n icocurrent+=i\\n brackethist=bracket\\nif not wh:\\n user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 356} of file {\b edupage.py}.}\par
}
{\xe \v args\:edupage}
{\xe \v edupage\:args}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.args = parser.parse_args()}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 53} of file {\b edupage.py}.}\par
}
{\xe \v cachename\:edupage}
{\xe \v edupage\:cachename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string edupage.cachename = 'data.xp2'}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 409} of file {\b edupage.py}.}\par
}
{\xe \v choices\:edupage}
{\xe \v edupage\:choices}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.choices}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b edupage.py}.}\par
}
{\xe \v codeapp\:edupage}
{\xe \v edupage\:codeapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.codeapp = str('import sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'\\"\\', \\"`\\"], [\\n \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n obsah = \\"\\"\\n obsah_list = []\\n for i in file:\\n obsah = \\"\\"\\n obsah += i\\n for i in obsah:\\n i.lower()\\n obsah_list.append(i)\\n return obsah_list\\ndef encode(obsah):\\n sifra = []\\n for i in obsah:\\n riadok = 0\\n stlpec = 0\\n while True:\\n if riadok == 19 and stlpec == 0:\\n break\\n if i == PLOCHA[riadok][stlpec]:\\n sifra.append(str(riadok) + \\" \\" + str(stlpec))\\n break\\n if stlpec == 4:\\n riadok += 1\\n stlpec = 0\\n else:\\n stlpec += 1\\n return sifra\\ndef output_file(file, name):\\n y = []\\n x = open(name + \\"crypted\\", \\"w\\")\\n for i in file:\\n y.append(i)\\n x.write(str(y))\\n x.close\\n return\\ndef {\b main}():\\n name = sys.argv[1]\\n open_file = open(name, \\"r\\")\\n open_file.close\\n output_file(encode(read_file(open_file)), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 352} of file {\b edupage.py}.}\par
}
{\xe \v config\:edupage}
{\xe \v edupage\:config}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.config = configparser.RawConfigParser()}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 13} of file {\b edupage.py}.}\par
}
{\xe \v crupdate\:edupage}
{\xe \v edupage\:crupdate}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.crupdate = open("update.py", "w")}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 340} of file {\b edupage.py}.}\par
}
{\xe \v decodeapp\:edupage}
{\xe \v edupage\:decodeapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.decodeapp = str('import os\\nos.system(\\'Title \\' + \\'code\\')\\nimport sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'"\\', \\"`"], [\\n \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n obsah = \\"\\"\\n obsah_list = []\\n for i in file:\\n obsah += i\\n for i in obsah:\\n obsah_list.append(i)\\n return obsah_list\\ndef {\b decode}(obsah):\\n done = \\"\\"\\n sifra = []\\n for i in obsah:\\n done += str(i)\\n if i == \\"[\\" or i == \\"\\'\\" or i == \\",\\" or i == \\"]\\":\\n done = \\"\\"\\n continue\\n if i == \\" \\":\\n sifra.append(i)\\n else:\\n sifra.append(i)\\n return sifra\\ndef real_decode(obsah):\\n cislo = 0\\n pokracovanie = False\\n done = \\"\\"\\n vysledok = []\\n for i in obsah:\\n done += str(i)\\n cislo = 0\\n for i in done:\\n cislo += 1\\n if i == \\" \\":\\n done = \\"\\"\\n continue\\n if pokracovanie and done.isnumeric() and cislo == 1:\\n stlpec = int(done)\\n vysledok.append(PLOCHA[riadok][stlpec])\\n pokracovanie = False\\n done = \\"\\"\\n continue\\n if not pokracovanie or cislo == 2:\\n pokracovanie = True\\n riadok = int(done)\\n continue\\n return vysledok\\ndef to_text(obsah):\\n text = \\"\\"\\n for i in obsah:\\n if i == \\".\\":\\n text += i + \\"\\\\n\\"\\n continue\\n text += i\\n return text\\ndef create_file(obsah, name):\\n x = open(sys.argv[1], \\"w\\")\\n x.write(obsah)\\n x.close\\n return\\ndef {\b main}():\\n if sys.argv[2] == \\'False\\':\\n name = \\'data\\'\\n else:\\n name = sys.argv[2]\\n open_file = open(name, \\"r\\")\\n {\b code} = list({\b decode}(read_file(open_file)))\\n create_file(to_text(real_decode({\b code})), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 353} of file {\b edupage.py}.}\par
}
{\xe \v default\:edupage}
{\xe \v edupage\:default}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.default}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 46} of file {\b edupage.py}.}\par
}
{\xe \v desc\:edupage}
{\xe \v edupage\:desc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.desc}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 288} of file {\b edupage.py}.}\par
}
{\xe \v directory\:edupage}
{\xe \v edupage\:directory}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.directory = None}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 313} of file {\b edupage.py}.}\par
}
{\xe \v filename\:edupage}
{\xe \v edupage\:filename}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string edupage.filename = "new.zip"}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 283} of file {\b edupage.py}.}\par
}
{\xe \v findapp\:edupage}
{\xe \v edupage\:findapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.findapp = str('import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nfor i in dnr:\\n if rnii:\\n wh=True\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if passend:\\n user.write({\b password}+\\'\\\\n\\')\\n passend=False\\n if ik:\\n if i!="," and bracket==4 and brackethist==4:\\n user.write(i)\\n if bracket==3:\\n subject=\\'\\'\\n ik=False\\n rniiend=False\\n user.write(\\"\\\\n\\")\\n if rniiend:\\n user.write(subject)\\n ik=True\\n rniiend=False\\n brackethist=bracket\\n continue\\n if userdef:\\n userdef=False\\n user=open(str(ico[0]),\\'w\\')\\n if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n rniiend=True\\n continue\\n subject+=str(i)\\n elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n passend=True\\n continue\\n {\b password}+=str(i)\\n brackethist=bracket\\n if bracket<2 and brackethist<2:\\n break\\n else:\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if icoend:\\n if icocurrent!=\\'\\':\\n if int(icocurrent)==icofind:\\n ico.append(icocurrent)\\n rnii=True\\n continue\\n icocurrent=\\'\\'\\n icoend=False\\n if bracket==2 and brackethist==2:\\n if i ==\\',\\':\\n icoend=True\\n userdef=True\\n continue\\n icocurrent+=i\\n brackethist=bracket\\nif not wh:\\n user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 354} of file {\b edupage.py}.}\par
}
{\xe \v help\:edupage}
{\xe \v edupage\:help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.help}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b edupage.py}.}\par
}
{\xe \v iterable\:edupage}
{\xe \v edupage\:iterable}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.iterable}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 288} of file {\b edupage.py}.}\par
}
{\xe \v language\:edupage}
{\xe \v edupage\:language}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.language = ['SK','EN','JP']}}
\par
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 44} of file {\b edupage.py}.}\par
}
{\xe \v loginvstupuser\:edupage}
{\xe \v edupage\:loginvstupuser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string edupage.loginvstupuser = ''}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 403} of file {\b edupage.py}.}\par
}
{\xe \v mode\:edupage}
{\xe \v edupage\:mode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.mode}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 286} of file {\b edupage.py}.}\par
}
{\xe \v nainstalovane\:edupage}
{\xe \v edupage\:nainstalovane}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dictionary edupage.nainstalovane = \{pkg.key for pkg in pkg_resources.working_set\}}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 97} of file {\b edupage.py}.}\par
}
{\xe \v nargs\:edupage}
{\xe \v edupage\:nargs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.nargs}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 45} of file {\b edupage.py}.}\par
}
{\xe \v nenajdene\:edupage}
{\xe \v edupage\:nenajdene}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dictionary edupage.nenajdene = {\b potrebne} - {\b nainstalovane}}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 98} of file {\b edupage.py}.}\par
}
{\xe \v page\:edupage}
{\xe \v edupage\:page}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.page = requests.get({\b url})}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 269} of file {\b edupage.py}.}\par
}
{\xe \v parser\:edupage}
{\xe \v edupage\:parser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.parser = argparse.ArgumentParser()}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 40} of file {\b edupage.py}.}\par
}
{\xe \v passwordapp\:edupage}
{\xe \v edupage\:passwordapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.passwordapp = str('import sys\\ndecodename=str(sys.argv[1])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.readlines()\\ntry:\\n number=int(dnr[0])\\n number=str(dnr[0])\\n number=dnr[0][:6]\\nexcept Exception:\\n number=None\\nx=open(\\'DONE\\',\\'w\\')\\nx.write(number)\\nx.close()')}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 355} of file {\b edupage.py}.}\par
}
{\xe \v potrebne\:edupage}
{\xe \v edupage\:potrebne}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
dictionary edupage.potrebne = \{'psutil', 'numpy','tqdm', 'semantic-version','screeninfo','opencv-python','glob2','keyboard','pywin32', 'pywinauto'\}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 96} of file {\b edupage.py}.}\par
}
{\xe \v progress_bar_check\:edupage}
{\xe \v edupage\:progress_bar_check}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int edupage.progress_bar_check = 0}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 405} of file {\b edupage.py}.}\par
}
{\xe \v progress_bar_end\:edupage}
{\xe \v edupage\:progress_bar_end}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool edupage.progress_bar_end = False}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 407} of file {\b edupage.py}.}\par
}
{\xe \v r\:edupage}
{\xe \v edupage\:r}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.r = requests.get({\b url})}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 282} of file {\b edupage.py}.}\par
}
{\xe \v restartapp\:edupage}
{\xe \v edupage\:restartapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.restartapp = str('import argparse, time\\nimport pyautogui as pg\\nUNSPECIFIED = object()\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-al\\',\\'--autol\\', {\b choices}=[], {\b default}={\b UNSPECIFIED}, {\b nargs}=\\'?\\')\\{\b nargs} = parser.parse_args()\\ntime.sleep(6)\\npg.write("login\\\\n")\\ntime.sleep(1)\\nif args.autol == None:\\n pg.write("\\\\n")')}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 357} of file {\b edupage.py}.}\par
}
{\xe \v screensize\:edupage}
{\xe \v edupage\:screensize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.screensize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)}}
\par
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 145} of file {\b edupage.py}.}\par
}
{\xe \v screensizepercentage\:edupage}
{\xe \v edupage\:screensizepercentage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.screensizepercentage = float((1/1920)*{\b screensize}[0]), float((1/1080)*{\b screensize}[1])}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 146} of file {\b edupage.py}.}\par
}
{\xe \v shell\:edupage}
{\xe \v edupage\:shell}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.shell}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 344} of file {\b edupage.py}.}\par
}
{\xe \v timeout\:edupage}
{\xe \v edupage\:timeout}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.timeout = 1}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 78} of file {\b edupage.py}.}\par
}
{\xe \v total\:edupage}
{\xe \v edupage\:total}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.total}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 288} of file {\b edupage.py}.}\par
}
{\xe \v UNSPECIFIED\:edupage}
{\xe \v edupage\:UNSPECIFIED}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.UNSPECIFIED = object()}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 41} of file {\b edupage.py}.}\par
}
{\xe \v updateapp\:edupage}
{\xe \v edupage\:updateapp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.updateapp = str('import argparse, shutil, os, subprocess, configparser, sys\\nfrom time import sleep\\nUNSPECIFIED = object()\\nglobal parser\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-ef\\', \\'--endf\\', {\b help}=\\'Will not automatically end program\\', {\b default}={\b UNSPECIFIED}, {\b nargs}=\\'?\\')\\nparser.add_argument(\\'-lang\\', \\'--language\\', {\b choices}=[\\'SK\\',\\'EN\\',\\'JP\\'], {\b help}=\\'Language selection\\', {\b nargs}=\\'?\\')\\nparser.add_argument(\\'input\\', {\b help}=\\'Input folder\\', {\b nargs}=\\'?\\')\\{\b nargs} = parser.parse_args()\\nconfig = configparser.RawConfigParser()\\nconfig.read(\\'config.ini\\')\\nargs.language = config.get(\\'basic info\\', \\'lang\\').split(\\' \\')[0]\\nif args.input != "":\\n sleep(0.5)\\n shutil.move(\\'edupage.py\\', \\'old/edupage.py\\')\\n shutil.move(args.input + \\'/edupage.py\\', \\'edupage.py\\')\\n sleep(0.2)\\n shutil.rmtree(args.input)\\n shutil.rmtree(\\'old\\')\\n if args.endf == None:\\n subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -endf -update\\', {\b shell}=True)\\n else:\\n subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -update\\', {\b shell}=True)\\n quit()')}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 258} of file {\b edupage.py}.}\par
}
{\xe \v url\:edupage}
{\xe \v edupage\:url}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
string edupage.url = 'https://raw.githubusercontent.com/GrenManSK/ZnamE/{\b main}/version'}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 268} of file {\b edupage.py}.}\par
}
{\xe \v user32\:edupage}
{\xe \v edupage\:user32}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.user32 = ctypes.windll.user32}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 144} of file {\b edupage.py}.}\par
}
{\xe \v verzia\:edupage}
{\xe \v edupage\:verzia}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
edupage.verzia = open('version', '{\b r}')}}
\par
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
Definition at line {\b 100} of file {\b edupage.py}.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
uninstall Namespace Reference\par \pard\plain 
{\tc\tcl2 \v uninstall}
{\xe \v uninstall}
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
CODE_OF_CONDUCT.md File Reference\par \pard\plain 
{\tc\tcl2 \v CODE_OF_CONDUCT.md}
{\xe \v CODE_OF_CONDUCT.md}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
edupage.py File Reference\par \pard\plain 
{\tc\tcl2 \v edupage.py}
{\xe \v edupage.py}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b edupage}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.getWindow} (Times)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.getImg} (imgSrc, name, x=None, y=None, width=None, length=None)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.move} (window, x, y, width, length)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.delcache} (name, hist)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.inactive} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.progress_bar} (name, number)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.add} (name, ico, subject, mark)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.decode} (name, password, mode=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.password} (name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.find} (name)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.code} (name, new, mode=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.mouseclick} (time=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.playhtml} (htmlFile, mode=0, time=0)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
def {\b edupage.main} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.config} = configparser.RawConfigParser()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.parser} = argparse.ArgumentParser()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.UNSPECIFIED} = object()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
list {\b edupage.language} = ['SK','EN','JP']\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.choices}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.help}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.nargs}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.default}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.args} = parser.parse_args()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b edupage.timeout} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b edupage.potrebne} = \{'psutil', 'numpy','tqdm', 'semantic-version','screeninfo','opencv-python','glob2','keyboard','pywin32', 'pywinauto'\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b edupage.nainstalovane} = \{pkg.key for pkg in pkg_resources.working_set\}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
dictionary {\b edupage.nenajdene} = potrebne - nainstalovane\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.verzia} = open('version', 'r')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.user32} = ctypes.windll.user32\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.screensize} = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.screensizepercentage} = float((1/1920)*screensize[0]), float((1/1080)*screensize[1])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.updateapp} = str('import argparse, shutil, os, subprocess, configparser, sys\\nfrom time import sleep\\nUNSPECIFIED = object()\\nglobal parser\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-ef\\', \\'--endf\\', help=\\'Will not automatically end program\\', default=UNSPECIFIED, nargs=\\'?\\')\\nparser.add_argument(\\'-lang\\', \\'--language\\', choices=[\\'SK\\',\\'EN\\',\\'JP\\'], help=\\'Language selection\\', nargs=\\'?\\')\\nparser.add_argument(\\'input\\', help=\\'Input folder\\', nargs=\\'?\\')\\nargs = parser.parse_args()\\nconfig = configparser.RawConfigParser()\\nconfig.read(\\'config.ini\\')\\nargs.language = config.get(\\'basic info\\', \\'lang\\').split(\\' \\')[0]\\nif args.input != "":\\n sleep(0.5)\\n shutil.move(\\'edupage.py\\', \\'old/edupage.py\\')\\n shutil.move(args.input + \\'/edupage.py\\', \\'edupage.py\\')\\n sleep(0.2)\\n shutil.rmtree(args.input)\\n shutil.rmtree(\\'old\\')\\n if args.endf == None:\\n subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -endf -update\\', shell=True)\\n else:\\n subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -update\\', shell=True)\\n quit()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b edupage.url} = 'https://raw.githubusercontent.com/GrenManSK/ZnamE/main/version'\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.page} = requests.get(url)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.r} = requests.get(url)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b edupage.filename} = "new.zip"\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.mode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.iterable}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.total}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.desc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.directory} = None\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.crupdate} = open("update.py", "w")\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.shell}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.codeapp} = str('import sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'\\"\\', \\"`\\"], [\\n \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n obsah = \\"\\"\\n obsah_list = []\\n for i in file:\\n obsah = \\"\\"\\n obsah += i\\n for i in obsah:\\n i.lower()\\n obsah_list.append(i)\\n return obsah_list\\ndef encode(obsah):\\n sifra = []\\n for i in obsah:\\n riadok = 0\\n stlpec = 0\\n while True:\\n if riadok == 19 and stlpec == 0:\\n break\\n if i == PLOCHA[riadok][stlpec]:\\n sifra.append(str(riadok) + \\" \\" + str(stlpec))\\n break\\n if stlpec == 4:\\n riadok += 1\\n stlpec = 0\\n else:\\n stlpec += 1\\n return sifra\\ndef output_file(file, name):\\n y = []\\n x = open(name + \\"crypted\\", \\"w\\")\\n for i in file:\\n y.append(i)\\n x.write(str(y))\\n x.close\\n return\\ndef main():\\n name = sys.argv[1]\\n open_file = open(name, \\"r\\")\\n open_file.close\\n output_file(encode(read_file(open_file)), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.decodeapp} = str('import os\\nos.system(\\'Title \\' + \\'code\\')\\nimport sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'"\\', \\"`"], [\\n \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n obsah = \\"\\"\\n obsah_list = []\\n for i in file:\\n obsah += i\\n for i in obsah:\\n obsah_list.append(i)\\n return obsah_list\\ndef decode(obsah):\\n done = \\"\\"\\n sifra = []\\n for i in obsah:\\n done += str(i)\\n if i == \\"[\\" or i == \\"\\'\\" or i == \\",\\" or i == \\"]\\":\\n done = \\"\\"\\n continue\\n if i == \\" \\":\\n sifra.append(i)\\n else:\\n sifra.append(i)\\n return sifra\\ndef real_decode(obsah):\\n cislo = 0\\n pokracovanie = False\\n done = \\"\\"\\n vysledok = []\\n for i in obsah:\\n done += str(i)\\n cislo = 0\\n for i in done:\\n cislo += 1\\n if i == \\" \\":\\n done = \\"\\"\\n continue\\n if pokracovanie and done.isnumeric() and cislo == 1:\\n stlpec = int(done)\\n vysledok.append(PLOCHA[riadok][stlpec])\\n pokracovanie = False\\n done = \\"\\"\\n continue\\n if not pokracovanie or cislo == 2:\\n pokracovanie = True\\n riadok = int(done)\\n continue\\n return vysledok\\ndef to_text(obsah):\\n text = \\"\\"\\n for i in obsah:\\n if i == \\".\\":\\n text += i + \\"\\\\n\\"\\n continue\\n text += i\\n return text\\ndef create_file(obsah, name):\\n x = open(sys.argv[1], \\"w\\")\\n x.write(obsah)\\n x.close\\n return\\ndef main():\\n if sys.argv[2] == \\'False\\':\\n name = \\'data\\'\\n else:\\n name = sys.argv[2]\\n open_file = open(name, \\"r\\")\\n code = list(decode(read_file(open_file)))\\n create_file(to_text(real_decode(code)), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.findapp} = str('import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nfor i in dnr:\\n if rnii:\\n wh=True\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if passend:\\n user.write(password+\\'\\\\n\\')\\n passend=False\\n if ik:\\n if i!="," and bracket==4 and brackethist==4:\\n user.write(i)\\n if bracket==3:\\n subject=\\'\\'\\n ik=False\\n rniiend=False\\n user.write(\\"\\\\n\\")\\n if rniiend:\\n user.write(subject)\\n ik=True\\n rniiend=False\\n brackethist=bracket\\n continue\\n if userdef:\\n userdef=False\\n user=open(str(ico[0]),\\'w\\')\\n if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n rniiend=True\\n continue\\n subject+=str(i)\\n elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n passend=True\\n continue\\n password+=str(i)\\n brackethist=bracket\\n if bracket<2 and brackethist<2:\\n break\\n else:\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if icoend:\\n if icocurrent!=\\'\\':\\n if int(icocurrent)==icofind:\\n ico.append(icocurrent)\\n rnii=True\\n continue\\n icocurrent=\\'\\'\\n icoend=False\\n if bracket==2 and brackethist==2:\\n if i ==\\',\\':\\n icoend=True\\n userdef=True\\n continue\\n icocurrent+=i\\n brackethist=bracket\\nif not wh:\\n user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.passwordapp} = str('import sys\\ndecodename=str(sys.argv[1])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.readlines()\\ntry:\\n number=int(dnr[0])\\n number=str(dnr[0])\\n number=dnr[0][:6]\\nexcept Exception:\\n number=None\\nx=open(\\'DONE\\',\\'w\\')\\nx.write(number)\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.addapp} = str('import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\nsubjectfind = sys.argv[3]\\nmarkadd = sys.argv[4]\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nik2=False\\nadd=False\\nuser=open(\\'data1\\',\\'w\\', newline=\\'\\')\\nfor i in dnr:\\n user.write(i)\\n if rnii:\\n wh=True\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if add and subject==subjectfind and bracket==4 and brackethist==4:\\n subjectfind=None\\n user.write(str(markadd) + \\',\\')\\n add=False\\n if passend:\\n passend=False\\n if ik:\\n if ik2:\\n ik2=False\\n add=True\\n if bracket==3:\\n subject=\\'\\'\\n ik=False\\n rniiend=False\\n if rniiend:\\n ik=True\\n ik2=True\\n rniiend=False\\n brackethist=bracket\\n continue\\n if userdef:\\n userdef=False\\n if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n rniiend=True\\n continue\\n subject+=str(i)\\n elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n if i ==\\',\\':\\n passend=True\\n continue\\n password+=str(i)\\n brackethist=bracket\\n else:\\n if i==\\'[\\':\\n bracket+=1\\n elif i==\\']\\':\\n bracket-=1\\n if icoend:\\n if icocurrent!=\\'\\':\\n if int(icocurrent)==icofind:\\n ico.append(icocurrent)\\n rnii=True\\n continue\\n icocurrent=\\'\\'\\n icoend=False\\n if bracket==2 and brackethist==2:\\n if i ==\\',\\':\\n icoend=True\\n userdef=True\\n continue\\n icocurrent+=i\\n brackethist=bracket\\nif not wh:\\n user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b edupage.restartapp} = str('import argparse, time\\nimport pyautogui as pg\\nUNSPECIFIED = object()\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-al\\',\\'--autol\\', choices=[], default=UNSPECIFIED, nargs=\\'?\\')\\nargs = parser.parse_args()\\ntime.sleep(6)\\npg.write("login\\\\n")\\ntime.sleep(1)\\nif args.autol == None:\\n pg.write("\\\\n")')\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b edupage.loginvstupuser} = ''\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b edupage.progress_bar_check} = 0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b edupage.progress_bar_end} = False\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
string {\b edupage.cachename} = 'data.xp2'\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
edupage.py\par \pard\plain 
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00002 {\cf22 """}\par
00003 {\cf22 Read the config file (ini) and print the contents.}\par
00004 {\cf22 @param config - the config file itself}\par
00005 {\cf22 @returns nothing}\par
00006 {\cf22 """}\par
00007 \par
00008 {\cf17 import} argparse, pkg_resources, sys, os, subprocess, configparser\par
00009 {\cf17 from} time {\cf17 import} sleep\par
00010 print({\cf22 'Reading config file (ini)\\n'})\par
00011 sleep(0.25)\par
00012 {\cf19 try}:\par
00013     config = configparser.RawConfigParser()\par
00014     config.read({\cf22 'config.ini'})\par
00015 {\cf19 except} configparser.DuplicateSectionError:\par
00016     print({\cf22 "'config.ini' file is corrupt -> Duplicate section"})\par
00017     input({\cf22 "Press 'enter' to quit"})\par
00018     quit()\par
00019 {\cf19 except} configparser.DuplicateOptionError:\par
00020     print({\cf22 "'config.ini' file is corrupt -> Duplicate option"})\par
00021     input({\cf22 "Press 'enter' to quit"})\par
00022     quit()\par
00023 {\cf19 except} configparser.NoSectionError:\par
00024     print({\cf22 "'config.ini' file is corrupt -> No section"})\par
00025     input({\cf22 "Press 'enter' to quit"})\par
00026     quit()\par
00027 print(config.get({\cf22 'basic info'},{\cf22 'lang'}).split({\cf22 ' '})[0])\par
00028 print(config.get({\cf22 'basic info'},{\cf22 'enviroment'}).split({\cf22 ' '})[0])\par
00029 print(config.get({\cf22 'basic info'},{\cf22 'intro'}).split({\cf22 ' '})[0])\par
00030 print(config.items({\cf22 'user history'}))\par
00031 print({\cf22 '\\nDone'})\par
00032 \par
00033 {\cf22 """}\par
00034 {\cf22 This function is the main function of the program. It will be called when the program is run.}\par
00035 {\cf22 It will parse the arguments and call the appropriate functions.}\par
00036 {\cf22 @param args - the arguments passed to the program.}\par
00037 {\cf22 """}\par
00038 \par
00039 {\cf17 global} parser\par
00040 parser = argparse.ArgumentParser()\par
00041 UNSPECIFIED = object()\par
00042 sleep(0.5)\par
00043 os.system({\cf22 'cls'})\par
00044 language = [{\cf22 'SK'},{\cf22 'EN'},{\cf22 'JP'}]\par
00045 parser.add_argument({\cf22 '-lang'}, {\cf22 '--language'}, choices=language, help={\cf22 'Language selection'}, nargs={\cf22 '?'})\par
00046 parser.add_argument({\cf22 '-v'}, {\cf22 '--version'}, choices=[], help={\cf22 'Show version of this program'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00047 parser.add_argument({\cf22 '-ef'}, {\cf22 '--endf'}, choices=[], help={\cf22 'Will not automatically end program'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00048 parser.add_argument({\cf22 '-ni'}, {\cf22 '--nointro'}, choices=[], help={\cf22 'Will not start intro'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00049 parser.add_argument({\cf22 '-nif'}, {\cf22 '--nointrof'}, choices=[], help={\cf22 'Will not start intro'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00050 parser.add_argument({\cf22 '-inactive'}, {\cf22 '--inactive'}, choices=[], help={\cf22 '!!! Argument for program to use'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00051 parser.add_argument({\cf22 '-update'}, {\cf22 '--update'}, choices=[], help={\cf22 '!!! Argument for program to use (this command won\\'t update this program, it does it automatically)'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00052 parser.add_argument({\cf22 '-test'}, {\cf22 '--test'}, choices=[], help={\cf22 '!!! Argument for program to use'}, default=UNSPECIFIED, nargs={\cf22 '?'})\par
00053 args = parser.parse_args()\par
00054 \par
00055 {\cf22 """}\par
00056 {\cf22 If the language is not specified, use the default language from the config file.}\par
00057 {\cf22 @param args.language - the language specified by the user, or the default language from the config file.}\par
00058 {\cf22 """}\par
00059 \par
00060 {\cf19 if} args.language == {\cf18 None}:\par
00061     args.language = config.get({\cf22 'basic info'}, {\cf22 'lang'}).split({\cf22 ' '})[0]\par
00062     \par
00063 {\cf22 """}\par
00064 {\cf22 If the user has specified that we should update the rotation dictionary, remove the old update.py file.}\par
00065 {\cf22 """}\par
00066 {\cf19 if} args.update == {\cf18 None}:\par
00067     {\cf19 try}:\par
00068         os.remove({\cf22 'update.py'})\par
00069     {\cf19 except} FileNotFoundError:\par
00070         print({\cf22 ''})\par
00071 \par
00072 {\cf22 """}\par
00073 {\cf22 Check if the internet is working. If it is not, print an error message and quit.}\par
00074 {\cf22 """}\par
00075 \par
00076 {\cf19 try}:\par
00077     {\cf17 import} requests\par
00078     timeout = 1\par
00079     requests.head({\cf22 "http://www.google.com/"}, timeout=timeout)\par
00080 {\cf19 except} requests.ConnectionError: {\cf20 # type: ignore}\par
00081     {\cf19 if} args.language == {\cf22 "SK"}:\par
00082         print({\cf22 "Va\'9Ae internetov\'E9 pripojenie nefunguje"})\par
00083     {\cf19 if} args.language == {\cf22 "EN"}:\par
00084         print({\cf22 "The internet connection is down"})\par
00085     {\cf19 if} args.language == {\cf22 "JP"}:\par
00086         print({\cf22 "\'E3\'82\'A4\'E3\'83\'B3\'E3\'82\'BF\'E3\'83\'BC\'E3\'83\'8D\'E3\'83\'83\'E3\'83\'88\'E6\'8E\'A5\'E7\'B6\'9A\'E3\'81\'8C\'E3\'83\'80\'E3\'82\'A6\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99\\nIf you don't see any of characters watch 'help.txt'"})\par
00087     sleep(2)\par
00088     quit()\par
00089 \par
00090 {\cf22 """}\par
00091 {\cf22 Check if the program is up to date. If not, update the program.}\par
00092 {\cf22 @param potrebne - the packages needed for the program to run properly           }\par
00093 {\cf22 }{\cf21 @param} nainstalovane - the packages installed on the system           \par
00094 {\cf21 @param} nenajdene - the packages that are {\cf19 not} installed on the system\par
00095 {\cf22 """}\par
00096 {\cf22 potrebne = \{'psutil', 'numpy','tqdm', 'semantic-version','screeninfo','opencv-python','glob2','keyboard','pywin32', 'pywinauto'\}}\par
00097 {\cf22 nainstalovane = \{pkg.key for pkg in pkg_resources.working_set\}}\par
00098 {\cf22 nenajdene = potrebne - nainstalovane}\par
00099 {\cf22 if args.version == None:}\par
00100 {\cf22     verzia = open('version'}, {\cf22 'r'})\par
00101     print(verzia.read())\par
00102     verzia.close()\par
00103     {\cf19 if} nenajdene:\par
00104         {\cf19 if} args.language == {\cf22 "SK"}:\par
00105             print({\cf22 'Aktualiz\'E1cia je k dispoz\'EDci\'ED: '}, *nenajdene)\par
00106         {\cf19 if} args.language == {\cf22 "EN"}:\par
00107             print({\cf22 'Update is available: '}, *nenajdene)\par
00108         {\cf19 if} args.language == {\cf22 "JP"}:\par
00109             print({\cf22 '\'E3\'82\'A2\'E3\'83\'83\'E3\'83\'97\'E3\'83\'87\'E3\'83\'BC\'E3\'83\'88\'E3\'81\'8C\'E5\'88\'A9\'E7\'94\'A8\'E5\'8F\'AF\'E8\'83\'BD\'E3\'81\'A7\'E3\'81\'99\'EF\'BC\'9A '}, *nenajdene)\par
00110     quit()\par
00111 {\cf19 if} nenajdene:\par
00112     {\cf19 if} args.language == {\cf22 "SK"}:\par
00113         print({\cf22 'Aktualiz\'E1cia je k dispoz\'EDci\'ED: '}, *nenajdene)\par
00114     {\cf19 if} args.language == {\cf22 "EN"}:\par
00115         print({\cf22 'Update is available: '}, *nenajdene)\par
00116     {\cf19 if} args.language == {\cf22 "JP"}:\par
00117         print({\cf22 '\'E3\'82\'A2\'E3\'83\'83\'E3\'83\'97\'E3\'83\'87\'E3\'83\'BC\'E3\'83\'88\'E3\'81\'8C\'E5\'88\'A9\'E7\'94\'A8\'E5\'8F\'AF\'E8\'83\'BD\'E3\'81\'A7\'E3\'81\'99\'EF\'BC\'9A '}, *nenajdene)\par
00118     sleep(0.5)\par
00119     {\cf19 if} args.language == {\cf22 "SK"}:\par
00120         print({\cf22 "S\'C5\'A5ahuj\'C3\'BA sa aktualiz\'C3\'A1cie"})\par
00121     {\cf19 if} args.language == {\cf22 "EN"}:\par
00122         print({\cf22 "Downloading updates"})\par
00123     {\cf19 if} args.language == {\cf22 "JP"}:\par
00124         print({\cf22 "\'E3\'82\'A2\'E3\'83\'83\'E3\'83\'97\'E3\'83\'87\'E3\'83\'BC\'E3\'83\'88\'E3\'81\'AE\'E3\'83\'80\'E3\'82\'A6\'E3\'83\'B3\'E3\'83\'AD\'E3\'83\'BC\'E3\'83\'89"})\par
00125     subprocess.check_call([sys.executable, {\cf22 '-m'}, {\cf22 'pip'}, {\cf22 'install'}, *nenajdene])\par
00126     {\cf19 if} args.language == {\cf22 "SK"}:\par
00127         print({\cf22 "Program sa re\'9Atartuje!!!"})\par
00128     {\cf19 if} args.language == {\cf22 "EN"}:\par
00129         print({\cf22 "The program is restarting!!!"})\par
00130     {\cf19 if} args.language == {\cf22 "JP"}:\par
00131         print({\cf22 "\'E7\'95\'AA\'E7\'B5\'84\'E5\'86\'8D\'E9\'96\'8B\'EF\'BC\'81\'EF\'BC\'81\'EF\'BC\'81"})\par
00132     sleep(1)\par
00133     subprocess.call([sys.executable, os.path.realpath(__file__)] + sys.argv[1:])\par
00134     quit()\par
00135 {\cf17 from} threading {\cf17 import} Thread\par
00136 {\cf17 from} tqdm {\cf17 import} tqdm\par
00137 {\cf17 from} datetime {\cf17 import} datetime\par
00138 {\cf17 from} pathlib {\cf17 import} Path\par
00139 {\cf17 import} pyautogui {\cf17 as} pg\par
00140 {\cf17 import} shutil, zipfile, semantic_version, win32gui, ctypes, cv2, glob, webbrowser, win32api, time, pywinauto\par
00141 verzia = open({\cf22 'version'}, {\cf22 'r'})\par
00142 os.system({\cf22 'color '} + config.get({\cf22 'basic info'},{\cf22 'enviroment'}).split({\cf22 ' '})[0])\par
00143 os.system({\cf22 'Title '} + {\cf22 'Zn\'E1mE'})\par
00144 user32 = ctypes.windll.user32\par
00145 screensize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)\par
00146 screensizepercentage = float((1/1920)*screensize[0]), float((1/1080)*screensize[1])\par
00147 \par
00148 \par
00149 {\cf17 def }getWindow(Times):\par
00150     {\cf22 """}\par
00151 {\cf22     The getWindow function }{\cf19 is} used to get the window that we want to use.\par
00152     It takes {\cf19 in} a parameter called Times which {\cf19 is} used {\cf19 for} the number of times \par
00153     that we want to press tab {\cf19 and} alt. The function will first open up a fullscreen \par
00154     window {\cf17 with} an image, then it will press Alt+Tab so that you can switch windows, \par
00155     {\cf19 and} then it will close out of the full screen window {\cf19 and} {\cf19 return} back into your previous window.\par
00156     \par
00157     :param Times: Determine {\cf19 if} the window {\cf19 is} to be closed {\cf19 or} {\cf19 not}\par
00158     :{\cf19 return}: The window that the program {\cf19 is} currently on\par
00159     {\cf22 """}\par
00160 {\cf22     }\par
00161 {\cf22     stop_thread1 = }{\cf17 True}\par
00162     a = {\cf18 None}\par
00163     cv2.namedWindow({\cf22 'frame2'}, cv2.WND_PROP_FULLSCREEN)\par
00164     cv2.setWindowProperty({\cf22 'frame2'}, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)\par
00165     test = {\cf22 "assets/banner.png"}\par
00166     {\cf19 for} file {\cf19 in} glob.glob(test):\par
00167         a = cv2.imread(file)\par
00168     cv2.imshow({\cf22 "Image"}, a)\par
00169     cv2.waitKey(1)\par
00170     sleep(0.1)\par
00171     cv2.destroyWindow({\cf22 "Image"})\par
00172     {\cf19 if} Times == 1 {\cf19 or} Times == 0:\par
00173         ctypes.windll.user32.keybd_event(0x12, 0, 0, 0)  {\cf20 # Alt}\par
00174         ctypes.windll.user32.keybd_event(0x09, 0, 0, 0)  {\cf20 # Tab}\par
00175         sleep(0.01)\par
00176         {\cf19 if} Times == 1:\par
00177             ctypes.windll.user32.keybd_event(0x09, 0, 2, 0)  {\cf20 # ~Tab}\par
00178             sleep(0.1)\par
00179             ctypes.windll.user32.keybd_event(0x09, 0, 0, 0)  {\cf20 # Tab}\par
00180             sleep(0.01)\par
00181         ctypes.windll.user32.keybd_event(0x09, 0, 2, 0)  {\cf20 # ~Tab}\par
00182         ctypes.windll.user32.keybd_event(0x12, 0, 2, 0)  {\cf20 # ~Alt}\par
00183         sleep(0.01)\par
00184 \par
00185 \par
00186 {\cf17 def }getImg(imgSrc, name, x=None, y=None, width=None, length=None):\par
00187     {\cf22 """}\par
00188 {\cf22     The getImg function displays an image }{\cf17 from} the source. If x, y, width, {\cf19 and} length are specified, then the image will be displayed at those coordinates {\cf17 with} the specified width {\cf19 and} length. Otherwise, the image will be displayed at the default coordinates {\cf19 and} default width {\cf19 and} length.\par
00189     \par
00190     :param imgSrc: Specify the source of the image\par
00191     :param name: Name the window\par
00192     :param x={\cf18 None}: Specify the x coordinate of the window\par
00193     :param y={\cf18 None}: Specify the y coordinate of the window\par
00194     :param width={\cf18 None}: Specify the width of the window\par
00195     :param length={\cf18 None}: Set the length of the window to its default value\par
00196     :{\cf19 return}: The image that {\cf19 is} displayed\par
00197     {\cf22 """}\par
00198 {\cf22     }\par
00199 {\cf22     path = imgSrc}\par
00200 {\cf22     }{\cf19 for} file {\cf19 in} glob.glob(path):\par
00201         {\cf17 global} a\par
00202         a = cv2.imread(file)\par
00203         cv2.imshow(name, a)\par
00204         {\cf19 if} x!={\cf18 None} {\cf19 and} y!={\cf18 None} {\cf19 and} width!={\cf18 None} {\cf19 and} length!={\cf18 None}:\par
00205             appname = name\par
00206             xpos = x\par
00207             ypos = y\par
00208             {\cf19 if} width == {\cf18 None}:\par
00209                 width = int((screensize[0]/10)*9)\par
00210             {\cf19 if} length == {\cf18 None}:\par
00211                 length = int((screensize[1]/10)*9)\par
00212             {\cf17 def }enumHandler(hwnd, lParam):\par
00213                 {\cf19 if} win32gui.IsWindowVisible(hwnd):  {\cf20 # type: ignore}\par
00214                     {\cf19 if} appname {\cf19 in} win32gui.GetWindowText(hwnd):  {\cf20 # type: ignore}\par
00215                         win32gui.MoveWindow(hwnd, xpos, ypos, width, length, {\cf17 True})  {\cf20 # type: ignore}\par
00216             win32gui.EnumWindows(enumHandler, {\cf18 None})  {\cf20 # type: ignore}\par
00217         k = cv2.waitKey(33)\par
00218         cv2.setWindowProperty(name, cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)\par
00219         {\cf19 if} k == 27:\par
00220             {\cf19 break}\par
00221         {\cf19 elif} k == -1:\par
00222             {\cf19 continue}\par
00223         {\cf19 else}:\par
00224             print(k)\par
00225             cv2.destroyAllWindows()\par
00226 \par
00227 {\cf17 def }move(window, x, y, width, length):\par
00228     {\cf22 """}\par
00229 {\cf22     The move function moves the specified window to a specified location.}\par
00230 {\cf22     The move function takes four arguments:}\par
00231 {\cf22         1) The name of the window }{\cf17 as} a string. This {\cf19 is} case sensitive {\cf19 and} should be enclosed {\cf19 in} quotation marks {\cf19 if} it contains spaces {\cf19 or} special characters (e.g., &quot;Microsoft Word&quot;). \par
00232         2) The x-coordinate of the desired location on your screen, measured {\cf19 in} pixels {\cf17 from} the left edge of your screen to where you want your window located (e.g., 100). \par
00233         3) The y-coordinate of the desired location on your screen, measured {\cf19 in} pixels {\cf17 from} the top edge of your screen\par
00234     \par
00235     :param window: Specify the window name\par
00236     :param x: Set the x position of the window, y {\cf19 is} used to set the y position\par
00237     :param y: Move the window to the top of your screen\par
00238     :param width: Set the width of the window\par
00239     :param length: Set the height of the window\par
00240     :{\cf19 return}: The window handle of the specified application\par
00241     {\cf22 """}\par
00242 {\cf22     }\par
00243 {\cf22     appname = window}\par
00244 {\cf22     xpos = x}\par
00245 {\cf22     ypos = y}\par
00246 {\cf22     }{\cf19 if} width == {\cf18 None}:\par
00247         width = int((screensize[0]/10)*9)\par
00248     {\cf19 if} length == {\cf18 None}:\par
00249         length = int((screensize[1]/10)*9)\par
00250     {\cf17 def }enumHandler(hwnd, lParam):  {\cf20 # type: ignore}\par
00251         {\cf19 if} win32gui.IsWindowVisible(hwnd):  {\cf20 # type: ignore}\par
00252             {\cf19 if} appname {\cf19 in} win32gui.GetWindowText(hwnd):  {\cf20 # type: ignore}\par
00253                 win32gui.MoveWindow(hwnd, xpos, ypos, width, length, {\cf17 True})  {\cf20 # type: ignore}\par
00254     win32gui.EnumWindows(enumHandler, {\cf18 None})  {\cf20 # type: ignore}\par
00255 \par
00256 move({\cf22 "Zn\'E1mE"}, int(screensize[0]/20), int(-screensize[1]), {\cf18 None}, {\cf18 None})\par
00257 \par
00258 updateapp = str({\cf22 'import argparse, shutil, os, subprocess, configparser, sys\\nfrom time import sleep\\nUNSPECIFIED = object()\\nglobal parser\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-ef\\', \\'--endf\\', help=\\'Will not automatically end program\\', default=UNSPECIFIED, nargs=\\'?\\')\\nparser.add_argument(\\'-lang\\', \\'--language\\', choices=[\\'SK\\',\\'EN\\',\\'JP\\'], help=\\'Language selection\\', nargs=\\'?\\')\\nparser.add_argument(\\'input\\', help=\\'Input folder\\', nargs=\\'?\\')\\nargs = parser.parse_args()\\nconfig = configparser.RawConfigParser()\\nconfig.read(\\'config.ini\\')\\nargs.language = config.get(\\'basic info\\', \\'lang\\').split(\\' \\')[0]\\nif args.input != "":\\n    sleep(0.5)\\n    shutil.move(\\'edupage.py\\', \\'old/edupage.py\\')\\n    shutil.move(args.input + \\'/edupage.py\\', \\'edupage.py\\')\\n    sleep(0.2)\\n    shutil.rmtree(args.input)\\n    shutil.rmtree(\\'old\\')\\n    if args.endf == None:\\n        subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -endf -update\\', shell=True)\\n    else:\\n        subprocess.call(sys.executable + \\' edupage.py -lang \\' + args.language + \\' -update\\', shell=True)\\n    quit()'})\par
00259 \par
00260 {\cf22 """}\par
00261 {\cf22 Update the program to the newest version.}\par
00262 {\cf22 @param directory - the directory of the new version}\par
00263 {\cf22 @param args.language - the language of the program}\par
00264 {\cf22 """}\par
00265 \par
00266 {\cf19 if} args.test != {\cf18 None}:\par
00267     {\cf17 import} requests\par
00268     url = {\cf22 'https://raw.githubusercontent.com/GrenManSK/ZnamE/main/version'}\par
00269     page = requests.get(url)\par
00270     {\cf19 if}  semantic_version.Version(page.text[1:]) <= semantic_version.Version(verzia.read()[1:]):\par
00271         {\cf19 pass}\par
00272     {\cf19 else}:\par
00273         {\cf19 if} args.language == {\cf22 "SK"}:\par
00274             print({\cf22 "Bola n\'E1jden\'E1 nov\'E1 aktualizacia: "} + page.text)\par
00275         {\cf19 if} args.language == {\cf22 "EN"}:\par
00276             print({\cf22 "Newer version was found: "} + page.text)\par
00277         {\cf19 if} args.language == {\cf22 "JP"}:\par
00278             print({\cf22 "\'E6\'96\'B0\'E3\'81\'97\'E3\'81\'84\'E3\'83\'90\'E3\'83\'BC\'E3\'82\'B8\'E3\'83\'A7\'E3\'83\'B3\'E3\'81\'8C\'E8\'A6\'8B\'E3\'81\'A4\'E3\'81\'8B\'E3\'82\'8A\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F: "} + page.text)\par
00279         verzia.close()\par
00280         sleep(0.5)\par
00281         url = {\cf22 'https://api.github.com/repos/GrenManSK/ZnamE/zipball/main'}\par
00282         r = requests.get(url)\par
00283         filename = {\cf22 "new.zip"}\par
00284         {\cf17 with} open(filename,{\cf22 'wb'}) {\cf17 as} output_file:\par
00285             output_file.write(r.content)\par
00286         {\cf17 with} zipfile.ZipFile({\cf22 "new.zip"}, mode={\cf22 'r'}) {\cf17 as} zip:\par
00287             {\cf19 if} args.language == {\cf22 "SK"}:\par
00288                 {\cf19 for} member {\cf19 in} tqdm(iterable=zip.namelist(), total=len(zip.namelist()), desc={\cf22 'Rozba\'C4\'BEujem '}):\par
00289                     {\cf19 try}:\par
00290                         zip.extract(member)\par
00291                         tqdm.write(f{\cf22 "\{os.path.basename(member)\}("} + str(os.path.getsize(member)) + {\cf22 "KB)"})\par
00292                         sleep(0.05)\par
00293                     {\cf19 except} zipfile.error {\cf17 as} e:\par
00294                         {\cf19 pass}\par
00295             {\cf19 elif} args.language == {\cf22 "EN"}:\par
00296                 {\cf19 for} member {\cf19 in} tqdm(iterable=zip.namelist(), total=len(zip.namelist()), desc={\cf22 'Extracting '}):\par
00297                     {\cf19 try}:\par
00298                         zip.extract(member)\par
00299                         tqdm.write(f{\cf22 "\{os.path.basename(member)\}("} + str(os.path.getsize(member)) + {\cf22 "KB)"})\par
00300                         sleep(0.05)\par
00301                     {\cf19 except} zipfile.error {\cf17 as} e:\par
00302                         {\cf19 pass}\par
00303             {\cf19 elif} args.language == {\cf22 "JP"}:\par
00304                 {\cf19 for} member {\cf19 in} tqdm(iterable=zip.namelist(), total=len(zip.namelist()), desc={\cf22 '\'E6\'8A\'BD\'E5\'87\'BA\'E4\'B8\'AD '}):\par
00305                     {\cf19 try}:\par
00306                         zip.extract(member)\par
00307                         tqdm.write(f{\cf22 "\{os.path.basename(member)\}("} + str(os.path.getsize(member)) + {\cf22 "KB)"})\par
00308                         sleep(0.05)\par
00309                     {\cf19 except} zipfile.error {\cf17 as} e:\par
00310                         {\cf19 pass}\par
00311             zip.close()\par
00312         os.remove({\cf22 "new.zip"})\par
00313         directory = {\cf18 None}\par
00314         {\cf19 for} path, currentDirectory, files {\cf19 in} os.walk(Path.cwd()):\par
00315             {\cf19 for} directory1 {\cf19 in} currentDirectory:\par
00316                 {\cf19 if} directory1.startswith({\cf22 "GrenManSK-ZnamE-"}):\par
00317                     print(directory1)\par
00318                     directory = directory1\par
00319         {\cf19 if} directory == {\cf18 None}:\par
00320             {\cf19 if} args.language == {\cf22 "SK"}:\par
00321                 print({\cf22 "CHYBA STAHOVANIA\\nStiahnete manu\'E1lne nov\'9Aiu verziu z\\n'https://github.com/GrenManSK/ZnamE'"})\par
00322             {\cf19 if} args.language == {\cf22 "EN"}:\par
00323                 print({\cf22 "DOWNLOADING ERROR\\nManually download newer version from\\n'https://github.com/GrenManSK/ZnamE'"})\par
00324             {\cf19 if} args.language == {\cf22 "JP"}:\par
00325                 print({\cf22 "\'E3\'83\'80\'E3\'82\'A6\'E3\'83\'B3\'E3\'83\'AD\'E3\'83\'BC\'E3\'83\'89 \'E3\'82\'A8\'E3\'83\'A9\'E3\'83\'BC\\n'https://github.com/GrenManSK/ZnamE' \'E3\'81\'8B\'E3\'82\'89\'E6\'96\'B0\'E3\'81\'97\'E3\'81\'84\'E3\'83\'90\'E3\'83\'BC\'E3\'82\'B8\'E3\'83\'A7\'E3\'83\'B3\'E3\'82\'92\'E6\'89\'8B\'E5\'8B\'95\'E3\'81\'A7\'E3\'83\'80\'E3\'82\'A6\'E3\'83\'B3\'E3\'83\'AD\'E3\'83\'BC\'E3\'83\'89\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'8F\'E3\'81\'A0\'E3\'81\'95\'E3\'81\'84"})\par
00326             sleep(2)\par
00327             quit()\par
00328         os.mkdir({\cf22 'old'})\par
00329         shutil.move({\cf22 'data.xp2'},{\cf22 'old/data.xp2'})\par
00330         shutil.move({\cf22 'help.txt'},{\cf22 'old/help.txt'})\par
00331         shutil.move({\cf22 'LICENSE'},{\cf22 'old/LICENSE'})\par
00332         shutil.move({\cf22 'README.md'},{\cf22 'old/README.md'})\par
00333         shutil.move({\cf22 'version'},{\cf22 'old/version'})\par
00334         sleep(0.5)\par
00335         shutil.move(directory + {\cf22 "/data.xp2"}, {\cf22 'data.xp2'})\par
00336         shutil.move(directory + {\cf22 "/help.txt"}, {\cf22 'help.txt'})\par
00337         shutil.move(directory + {\cf22 "/LICENSE"}, {\cf22 'LICENSE'})\par
00338         shutil.move(directory + {\cf22 "/README.md"}, {\cf22 'README.md'})\par
00339         shutil.move(directory + {\cf22 "/version"}, {\cf22 'version'})\par
00340         crupdate = open({\cf22 "update.py"}, {\cf22 "w"})\par
00341         crupdate.write(updateapp)\par
00342         crupdate.close()\par
00343         {\cf19 if} args.endf == {\cf18 None}:\par
00344             subprocess.call(sys.executable + {\cf22 ' update.py '} + directory + {\cf22 ' -lang '} + args.language + {\cf22 ' -endf'}, shell={\cf17 True})\par
00345         {\cf19 else}:\par
00346             subprocess.call(sys.executable + {\cf22 ' update.py '} + directory + {\cf22 ' -lang '} + args.language , shell={\cf17 True})\par
00347         sleep(0.1)\par
00348         quit()\par
00349 \par
00350 verzia.close()\par
00351 \par
00352 codeapp = str({\cf22 'import sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n    \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n    \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n    \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n    \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n    \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'\\"\\', \\"`\\"], [\\n    \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n    \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n    \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n    obsah = \\"\\"\\n    obsah_list = []\\n    for i in file:\\n        obsah = \\"\\"\\n        obsah += i\\n        for i in obsah:\\n            i.lower()\\n            obsah_list.append(i)\\n    return obsah_list\\ndef encode(obsah):\\n    sifra = []\\n    for i in obsah:\\n        riadok = 0\\n        stlpec = 0\\n        while True:\\n            if riadok == 19 and stlpec == 0:\\n                break\\n            if i == PLOCHA[riadok][stlpec]:\\n                sifra.append(str(riadok) + \\" \\" + str(stlpec))\\n                break\\n            if stlpec == 4:\\n                riadok += 1\\n                stlpec = 0\\n            else:\\n                stlpec += 1\\n    return sifra\\ndef output_file(file, name):\\n    y = []\\n    x = open(name + \\"crypted\\", \\"w\\")\\n    for i in file:\\n        y.append(i)\\n    x.write(str(y))\\n    x.close\\n    return\\ndef main():\\n    name = sys.argv[1]\\n    open_file = open(name, \\"r\\")\\n    open_file.close\\n    output_file(encode(read_file(open_file)), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()'})\par
00353 decodeapp = str({\cf22 'import os\\nos.system(\\'Title \\' + \\'code\\')\\nimport sys\\nPLOCHA = [[\\"a\\", \\"b\\", \\"c\\", \\"d\\", \\"e\\"], [\\"f\\", \\"g\\", \\"h\\", \\"i\\", \\"j\\"], [\\n    \\"k\\", \\"l\\", \\"m\\", \\"n\\", \\"o\\", ], [\\"p\\", \\"q\\", \\"r\\", \\"s\\", \\"t\\"], [\\n    \\"u\\", \\"v\\", \\"w\\", \\"x\\", \\"y\\"], [\\"A\\", \\"B\\", \\"C\\", \\"D\\", \\"E\\"], [\\n    \\"F\\", \\"G\\", \\"H\\", \\"I\\", \\"J\\"], [\\"K\\", \\"L\\", \\"M\\", \\"N\\", \\"O\\", ], [\\n    \\"P\\", \\"Q\\", \\"R\\", \\"S\\", \\"T\\"], [\\"U\\", \\"V\\", \\"W\\", \\"X\\", \\"y\\"], [\\n    \\"z\\", \\" \\", \\",\\", \\".\\", \\":\\"], [\\"!\\", \\"?\\", \\"\\'\\", \\'"\\', \\"`"], [\\n    \\"1\\", \\"2\\", \\"3\\", \\"4\\", \\"5\\"], [\\"6\\", \\"7\\", \\"8\\", \\"9\\", \\"0\\"], [\\n    \\"\\\\n\\", \\"<\\", \\">\\", \\";\\", \\"/\\"], [\\"\\\\\\\\", \\"\{\\", \\"\}\\", \\"(\\", \\")\\"],[\\n    \\"[\\",\\"]\\",\\"|\\",\\"-\\",\\"_\\"],[\\"=\\",\\"+\\",\\"@\\",\\"#\\",\\"$\\"],[\\"%\\",\\"^\\",\\"&\\",\\"*\\",\\"~\\"]]\\ndef read_file(file):\\n    obsah = \\"\\"\\n    obsah_list = []\\n    for i in file:\\n        obsah += i\\n        for i in obsah:\\n            obsah_list.append(i)\\n    return obsah_list\\ndef decode(obsah):\\n    done = \\"\\"\\n    sifra = []\\n    for i in obsah:\\n        done += str(i)\\n        if i == \\"[\\" or i == \\"\\'\\" or i == \\",\\" or i == \\"]\\":\\n            done = \\"\\"\\n            continue\\n        if i == \\" \\":\\n            sifra.append(i)\\n        else:\\n            sifra.append(i)\\n    return sifra\\ndef real_decode(obsah):\\n    cislo = 0\\n    pokracovanie = False\\n    done = \\"\\"\\n    vysledok = []\\n    for i in obsah:\\n        done += str(i)\\n        cislo = 0\\n        for i in done:\\n            cislo += 1\\n        if i == \\" \\":\\n            done = \\"\\"\\n            continue\\n        if pokracovanie and done.isnumeric() and cislo == 1:\\n            stlpec = int(done)\\n            vysledok.append(PLOCHA[riadok][stlpec])\\n            pokracovanie = False\\n            done = \\"\\"\\n            continue\\n        if not pokracovanie or cislo == 2:\\n            pokracovanie = True\\n            riadok = int(done)\\n            continue\\n    return vysledok\\ndef to_text(obsah):\\n    text = \\"\\"\\n    for i in obsah:\\n        if i == \\".\\":\\n            text += i + \\"\\\\n\\"\\n            continue\\n        text += i\\n    return text\\ndef create_file(obsah, name):\\n    x = open(sys.argv[1], \\"w\\")\\n    x.write(obsah)\\n    x.close\\n    return\\ndef main():\\n    if sys.argv[2] == \\'False\\':\\n        name = \\'data\\'\\n    else:\\n        name = sys.argv[2]\\n    open_file = open(name, \\"r\\")\\n    code = list(decode(read_file(open_file)))\\n    create_file(to_text(real_decode(code)), name)\\nmain()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()'})\par
00354 findapp = str({\cf22 'import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nfor i in dnr:\\n    if rnii:\\n        wh=True\\n        if i==\\'[\\':\\n            bracket+=1\\n        elif i==\\']\\':\\n            bracket-=1\\n        if passend:\\n            user.write(password+\\'\\\\n\\')\\n            passend=False\\n        if ik:\\n            if i!="," and bracket==4 and brackethist==4:\\n                user.write(i)\\n            if bracket==3:\\n                subject=\\'\\'\\n                ik=False\\n                rniiend=False\\n                user.write(\\"\\\\n\\")\\n        if rniiend:\\n            user.write(subject)\\n            ik=True\\n            rniiend=False\\n            brackethist=bracket\\n            continue\\n        if userdef:\\n            userdef=False\\n            user=open(str(ico[0]),\\'w\\')\\n        if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n            if i ==\\',\\':\\n                rniiend=True\\n                continue\\n            subject+=str(i)\\n        elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n            if i ==\\',\\':\\n                passend=True\\n                continue\\n            password+=str(i)\\n        brackethist=bracket\\n        if bracket<2 and brackethist<2:\\n            break\\n    else:\\n        if i==\\'[\\':\\n            bracket+=1\\n        elif i==\\']\\':\\n            bracket-=1\\n        if icoend:\\n            if icocurrent!=\\'\\':\\n                if int(icocurrent)==icofind:\\n                    ico.append(icocurrent)\\n                    rnii=True\\n                    continue\\n                icocurrent=\\'\\'\\n                icoend=False\\n        if bracket==2 and brackethist==2:\\n            if i ==\\',\\':\\n                icoend=True\\n                userdef=True\\n                continue\\n            icocurrent+=i\\n        brackethist=bracket\\nif not wh:\\n    user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()'})\par
00355 passwordapp = str({\cf22 'import sys\\ndecodename=str(sys.argv[1])\\ndn=open(decodename,\\'r\\')\\ndnr=dn.readlines()\\ntry:\\n    number=int(dnr[0])\\n    number=str(dnr[0])\\n    number=dnr[0][:6]\\nexcept Exception:\\n    number=None\\nx=open(\\'DONE\\',\\'w\\')\\nx.write(number)\\nx.close()'})\par
00356 addapp = str({\cf22 'import sys\\ndecodename=str(sys.argv[1])\\nicofind=int(sys.argv[2])\\nsubjectfind = sys.argv[3]\\nmarkadd = sys.argv[4]\\ndn=open(decodename,\\'r\\')\\ndnr=dn.read()\\nbracket,brackethist=0,0\\nico=[]\\nicocurrent=\\'\\'\\nicoend=False\\nrnii=False\\nrniiend=False\\nsubject=\\'\\'\\nik=False\\nuserdef=False\\nwh=False\\npassword=\\'\\'\\npassend=False\\nik2=False\\nadd=False\\nuser=open(\\'data1\\',\\'w\\', newline=\\'\\')\\nfor i in dnr:\\n    user.write(i)\\n    if rnii:\\n        wh=True\\n        if i==\\'[\\':\\n            bracket+=1\\n        elif i==\\']\\':\\n            bracket-=1\\n        if add and subject==subjectfind and bracket==4 and brackethist==4:\\n            subjectfind=None\\n            user.write(str(markadd) + \\',\\')\\n            add=False\\n        if passend:\\n            passend=False\\n        if ik:\\n            if ik2:\\n                ik2=False\\n                add=True\\n            if bracket==3:\\n                subject=\\'\\'\\n                ik=False\\n                rniiend=False\\n        if rniiend:\\n            ik=True\\n            ik2=True\\n            rniiend=False\\n            brackethist=bracket\\n            continue\\n        if userdef:\\n            userdef=False\\n        if bracket==3 and brackethist==3 and i!=\\"\\'\\":\\n            if i ==\\',\\':\\n                rniiend=True\\n                continue\\n            subject+=str(i)\\n        elif bracket==5 and brackethist==5 and i!=\\"\\'\\":\\n            if i ==\\',\\':\\n                passend=True\\n                continue\\n            password+=str(i)\\n        brackethist=bracket\\n    else:\\n        if i==\\'[\\':\\n            bracket+=1\\n        elif i==\\']\\':\\n            bracket-=1\\n        if icoend:\\n            if icocurrent!=\\'\\':\\n                if int(icocurrent)==icofind:\\n                    ico.append(icocurrent)\\n                    rnii=True\\n                    continue\\n                icocurrent=\\'\\'\\n                icoend=False\\n        if bracket==2 and brackethist==2:\\n            if i ==\\',\\':\\n                icoend=True\\n                userdef=True\\n                continue\\n            icocurrent+=i\\n        brackethist=bracket\\nif not wh:\\n    user=open(sys.argv[2], \\'x\\')\\nuser.close()\\nx=open(\\'DONE\\',\\'x\\')\\nx.close()'})\par
00357 restartapp = str({\cf22 'import argparse, time\\nimport pyautogui as pg\\nUNSPECIFIED = object()\\nparser = argparse.ArgumentParser()\\nparser.add_argument(\\'-al\\',\\'--autol\\', choices=[], default=UNSPECIFIED, nargs=\\'?\\')\\nargs = parser.parse_args()\\ntime.sleep(6)\\npg.write("login\\\\n")\\ntime.sleep(1)\\nif args.autol == None:\\n    pg.write("\\\\n")'})\par
00358 \par
00359 {\cf17 def }delcache(name, hist):\par
00360     {\cf22 """}\par
00361 {\cf22     The delcache function deletes the cache file }{\cf19 if} it {\cf19 is} empty.\par
00362     \par
00363     \par
00364     :param name: Name the file that {\cf19 is} used to store the time\par
00365     :param hist: Check {\cf19 if} the history file has changed\par
00366     :{\cf19 return}: The value of the timer\par
00367     {\cf22 """}\par
00368 {\cf22     }\par
00369 {\cf22     }{\cf17 global} timer\par
00370     time_got = 300\par
00371     timer = time_got\par
00372     size = os.path.getsize(hist)\par
00373     sizehist = size\par
00374     {\cf19 while} {\cf17 True}:\par
00375         {\cf19 try}:\par
00376             {\cf19 for} i {\cf19 in} os.listdir():\par
00377                 {\cf19 if} i == {\cf22 "END"}:\par
00378                     {\cf19 raise} Exception\par
00379             {\cf19 if} timer <= 0:\par
00380                 os.remove(name)\par
00381                 x = open({\cf22 "INACTIVE"}, {\cf22 'x'})\par
00382                 x.close()\par
00383                 os.system({\cf22 'cls'})\par
00384                 {\cf19 if} args.language == {\cf22 "SK"}:\par
00385                     print({\cf22 "Stla\'C4\'8D 'enter'"})\par
00386                 {\cf19 if} args.language == {\cf22 "EN"}:\par
00387                     print({\cf22 "Press 'enter'"})\par
00388                 {\cf19 if} args.language == {\cf22 "JP"}:\par
00389                     print({\cf22 "\'E3\'80\'8C\'E5\'85\'A5\'E5\'8A\'9B\'E3\'80\'8D\'E3\'82\'92\'E6\'8A\'BC\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'8F\'E3\'81\'A0\'E3\'81\'95\'E3\'81\'84"})\par
00390                 playhtml({\cf22 'apphtml\\\\inactive'})\par
00391                 {\cf19 break}\par
00392             {\cf19 if} size != sizehist:\par
00393                 timer = time_got\par
00394                 sizehist = size\par
00395             {\cf19 else}:\par
00396                 sizehist = size\par
00397                 size = os.path.getsize(hist)\par
00398                 sleep(1)\par
00399                 timer -= 1\par
00400         {\cf19 except} Exception:\par
00401             {\cf19 pass}\par
00402 \par
00403 loginvstupuser = {\cf22 ''}\par
00404 {\cf17 global} progress_bar_check\par
00405 progress_bar_check = 0\par
00406 {\cf17 global} progress_bar_end\par
00407 progress_bar_end = {\cf17 False}\par
00408 \par
00409 cachename = {\cf22 'data.xp2'}\par
00410 \par
00411 {\cf17 def }inactive():\par
00412     {\cf22 """}\par
00413 {\cf22     The inactive function }{\cf19 is} used to check {\cf19 if} the INACTIVE file exists {\cf19 in} the current directory. If it does, then it will remove the password file {\cf19 and} {\cf19 return} {\cf17 True}. Otherwise, it returns {\cf17 False}.\par
00414     \par
00415     :{\cf19 return}: {\cf17 True} {\cf19 if} the file inactive {\cf19 is} found {\cf19 in} the directory\par
00416     {\cf22 """}\par
00417 {\cf22     }\par
00418 {\cf22     }{\cf17 global} password\par
00419     leave = {\cf17 False}\par
00420     {\cf19 for} i {\cf19 in} os.listdir():\par
00421         {\cf19 if} i == {\cf22 'INACTIVE'}:\par
00422             leave = {\cf17 True}\par
00423             {\cf19 try}:\par
00424                 os.remove(password[1])  {\cf20 # type: ignore}\par
00425             {\cf19 except} Exception:\par
00426                 {\cf19 pass}\par
00427             {\cf19 break}\par
00428     {\cf19 if} leave:\par
00429         sleep(0.05)\par
00430         {\cf19 return} {\cf17 True}\par
00431     {\cf19 else}:\par
00432         {\cf19 return} {\cf17 False}\par
00433     \par
00434 {\cf17 def }progress_bar(name, number):\par
00435     {\cf22 """}\par
00436 {\cf22     The progress_bar function }{\cf19 is} a function that takes {\cf19 in} two parameters: name {\cf19 and} number.\par
00437     The progress_bar function will {\cf19 print} out the name of the task being executed, {\cf19 and} then display a progress bar {\cf19 for} how \par
00438     far along it {\cf19 is} to completion. The progress bar will be displayed {\cf17 as} 100% {\cf19 if} number = 1,000,000 {\cf19 or} more.\par
00439     \par
00440     :param name: Give the progress bar a name\par
00441     :param number: Determine the number of iterations\par
00442     :{\cf19 return}: The progress bar\par
00443     {\cf22 """}\par
00444 {\cf22     }\par
00445 {\cf22     }{\cf17 global} progress_bar_check\par
00446     progress_bar_check = 0\par
00447     progress_bar_check_old = 0\par
00448     end = {\cf17 False}\par
00449     {\cf19 for} i {\cf19 in} tqdm(range(0,number), desc=name +{\cf22 ' '}):\par
00450         {\cf19 if} end:\par
00451             {\cf19 break}\par
00452         {\cf19 while} {\cf17 True}:\par
00453             {\cf19 if} progress_bar_check >= 100:\par
00454                 end = {\cf17 True}\par
00455                 {\cf19 break}\par
00456             {\cf19 if} progress_bar_check == progress_bar_check_old:\par
00457                 {\cf19 continue}\par
00458             {\cf19 elif} progress_bar_check != progress_bar_check_old:\par
00459                 progress_bar_check_old = progress_bar_check\par
00460                 {\cf19 break}\par
00461 \par
00462 {\cf17 def }add(name, ico, subject, mark):\par
00463     {\cf22 """}\par
00464 {\cf22     The add function adds a new subject to the database.}\par
00465 {\cf22     It takes 4 arguments: name, ico, subject }{\cf19 and} mark.\par
00466     The name argument {\cf19 is} the name of the school {\cf19 or} college that you want to add {\cf17 as} a string.\par
00467     The ico argument {\cf19 is} an integer representing your school{\cf22 's ICO number (the first 6 digits of your student ID).}\par
00468 {\cf22     The subject argument }{\cf19 is} a string containing what you want to be written {\cf19 in} the &quot;predmet&quot; column {\cf19 in} our database (e.g.: &quot;Matematika&quot;). The mark argument should be an integer between 1 {\cf19 and} 5 inclusive.\par
00469     \par
00470     :param name: Name the file\par
00471     :param ico: Check {\cf19 if} the student already exists {\cf19 in} the database\par
00472     :param subject: Specify the subject of the student\par
00473     :param mark: Specify the mark of the student\par
00474     :{\cf19 return}: The tuple (data, none)\par
00475     {\cf22 """}\par
00476 {\cf22     }\par
00477 {\cf22     }{\cf17 global} progress_bar_check\par
00478     decodename = str(datetime.now().strftime({\cf22 "%H-%M-%S"}))\par
00479     crdecode = open(decodename + {\cf22 ".py"}, {\cf22 "w"})\par
00480     crdecode.write(addapp)\par
00481     crdecode.close()\par
00482     subprocess.check_output({\cf22 'start '} + decodename + {\cf22 '.py '} + str(name) + {\cf22 ' '} + str(ico) + {\cf22 ' '} + str(subject) + {\cf22 ' '} + str(mark), shell={\cf17 True})\par
00483     {\cf19 if} args.language == {\cf22 "SK"}:\par
00484         tqdm.write({\cf22 'Prid\'E1vam ...'}, end={\cf22 '\\r'})\par
00485     {\cf19 if} args.language == {\cf22 "EN"}:\par
00486         tqdm.write({\cf22 'Adding ...'}, end={\cf22 '\\r'})\par
00487     {\cf19 if} args.language == {\cf22 "JP"}:\par
00488         tqdm.write({\cf22 '\'E8\'BF\'BD\'E5\'8A\'A0\'E3\'81\'99\'E3\'82\'8B ...'}, end={\cf22 '\\r'})\par
00489     {\cf19 while} {\cf17 True}:\par
00490         leave = {\cf17 False}\par
00491         {\cf19 for} i {\cf19 in} os.listdir():\par
00492             {\cf19 if} i == {\cf22 'DONE'}:\par
00493                 leave = {\cf17 True}\par
00494                 {\cf19 break}\par
00495         {\cf19 if} leave:\par
00496             sleep(0.05)\par
00497             {\cf19 break}\par
00498     {\cf19 if} args.language == {\cf22 "SK"}:\par
00499         tqdm.write({\cf22 'Prid\'E1vam Hotovo'})\par
00500     {\cf19 if} args.language == {\cf22 "EN"}:\par
00501         tqdm.write({\cf22 'Adding Complete'})\par
00502     {\cf19 if} args.language == {\cf22 "JP"}:\par
00503         tqdm.write({\cf22 '\'E8\'BF\'BD\'E5\'8A\'A0\'E5\'AE\'8C\'E4\'BA\'86'})\par
00504     os.remove(decodename + {\cf22 '.py'})\par
00505     os.remove(name)\par
00506     os.remove({\cf22 'DONE'})\par
00507     progress_bar_check += 1\par
00508     name = ({\cf22 'data1'}, {\cf18 None})\par
00509     {\cf19 return} name\par
00510 \par
00511 {\cf17 def }decode(name, password, mode=0):\par
00512     {\cf22 """}\par
00513 {\cf22     The decode function takes two arguments, name }{\cf19 and} password. If the name argument {\cf19 is} {\cf19 not} provided it will default to {\cf18 None}.\par
00514     If the password argument {\cf19 is} {\cf19 not} provided it will default to {\cf18 None} {\cf17 as} well. The function then creates a file {\cf17 with} the current time {\cf19 in} its name {\cf19 and} writes a python script into that file which decrypts all files {\cf19 in} this directory ({\cf19 except} {\cf19 for} itself) using pyAesCrypt library {\cf17 with} given password {\cf19 or} generated one {\cf19 if} none was given.\par
00515     \par
00516     :param name: Specify the name of the file to be decoded\par
00517     :param password: Encrypt the file {\cf17 with} a password\par
00518     :param mode=0: Encode the file, mode=0 {\cf19 is} used to decode the file\par
00519     :{\cf19 return}: The value of the name variable, {\cf19 if} it {\cf19 is} {\cf19 not} none\par
00520     {\cf22 """}\par
00521 {\cf22     }\par
00522 {\cf22     }{\cf17 global} progress_bar_check\par
00523     decodename = str(datetime.now().strftime({\cf22 "%H-%M-%S"}))\par
00524     decodename2 = {\cf22 'False'}\par
00525     {\cf19 if} password:\par
00526         decodename2 = name\par
00527     {\cf19 if} name:\par
00528         decodename1 = decodename\par
00529     {\cf19 elif} isinstance(name, str):\par
00530         decodename1 = name\par
00531     {\cf19 else}:\par
00532         decodename1 = {\cf22 "None"}\par
00533     crdecode = open(decodename + {\cf22 ".py"}, {\cf22 "w"})\par
00534     crdecode.write(decodeapp)\par
00535     crdecode.close()\par
00536     {\cf19 if} mode == 1:\par
00537         subprocess.check_output({\cf22 'start '} + decodename + {\cf22 '.py '} + str(name) + {\cf22 ' '} + str(password), shell={\cf17 True})\par
00538     {\cf19 elif} mode == 0:\par
00539         subprocess.check_output({\cf22 'start '} + decodename + {\cf22 '.py '} + str(decodename1) + {\cf22 ' '} + str(decodename2), shell={\cf17 True})\par
00540     {\cf19 if} args.language == {\cf22 "SK"}:\par
00541         tqdm.write({\cf22 'Odkoduv\'E1vam ...'}, end={\cf22 '\\r'})\par
00542     {\cf19 if} args.language == {\cf22 "EN"}:\par
00543         tqdm.write({\cf22 'Encrypting ...'}, end={\cf22 '\\r'})\par
00544     {\cf19 if} args.language == {\cf22 "JP"}:\par
00545         tqdm.write({\cf22 '\'E6\'9A\'97\'E5\'8F\'B7\'E5\'8C\'96 ...'}, end={\cf22 '\\r'})\par
00546     {\cf19 while} {\cf17 True}:\par
00547         leave = {\cf17 False}\par
00548         {\cf19 for} i {\cf19 in} os.listdir():\par
00549             {\cf19 if} i == {\cf22 'DONE'}:\par
00550                 leave = {\cf17 True}\par
00551                 {\cf19 break}\par
00552         {\cf19 if} leave:\par
00553             sleep(0.05)\par
00554             {\cf19 break}\par
00555     {\cf19 if} args.language == {\cf22 "SK"}:\par
00556         tqdm.write({\cf22 'Odkoduv\'E1vam Hotovo'})\par
00557     {\cf19 if} args.language == {\cf22 "EN"}:\par
00558         tqdm.write({\cf22 'Encrypting Complete'})\par
00559     {\cf19 if} args.language == {\cf22 "JP"}:\par
00560         tqdm.write({\cf22 '\'E6\'9A\'97\'E5\'8F\'B7\'E5\'8C\'96\'E5\'AE\'8C\'E4\'BA\'86'})\par
00561     os.remove(decodename + {\cf22 '.py'})\par
00562     os.remove({\cf22 'DONE'})\par
00563     {\cf19 if} mode == 1:\par
00564         file = open({\cf22 '1'}, {\cf22 'r'})\par
00565         fileline = str(file.readlines())\par
00566         fileline = fileline[2:len(fileline)-2]\par
00567         file.close()\par
00568         os.remove({\cf22 '1'})\par
00569         {\cf19 return} fileline\par
00570     progress_bar_check += 1\par
00571     {\cf19 return} decodename1\par
00572 \par
00573 {\cf17 def }password(name):\par
00574     {\cf22 """}\par
00575 {\cf22     Create a password file }{\cf19 for} the current session.\par
00576     {\cf21 @param} name - the name of the file to be created.\par
00577     {\cf22 """}\par
00578 {\cf22     }{\cf17 global} progress_bar_check\par
00579     passwordname = str(datetime.now().strftime({\cf22 "%H-%M-%S"}))\par
00580     crfind = open(passwordname + {\cf22 ".py"}, {\cf22 "w"})\par
00581     crfind.write(passwordapp)\par
00582     crfind.close()\par
00583     {\cf19 if} args.language == {\cf22 "SK"}:\par
00584         tqdm.write({\cf22 'Kontrolujem ...'}, end={\cf22 '\\r'})\par
00585     {\cf19 if} args.language == {\cf22 "EN"}:\par
00586         tqdm.write({\cf22 'Controling ...'}, end={\cf22 '\\r'})\par
00587     {\cf19 if} args.language == {\cf22 "JP"}:\par
00588         tqdm.write({\cf22 '\'E5\'88\'B6\'E5\'BE\'A1\'E3\'81\'99\'E3\'82\'8B ...'}, end={\cf22 '\\r'})\par
00589     subprocess.check_output({\cf22 'start '} + passwordname + {\cf22 '.py '} + str(name), shell={\cf17 True})\par
00590     {\cf19 while} {\cf17 True}:\par
00591         leave = {\cf17 False}\par
00592         {\cf19 for} i {\cf19 in} os.listdir():\par
00593             {\cf19 if} i == {\cf22 'DONE'}:\par
00594                 leave = {\cf17 True}\par
00595                 {\cf19 break}\par
00596         {\cf19 if} leave:\par
00597             sleep(0.05)\par
00598             {\cf19 break}\par
00599     os.remove(passwordname + {\cf22 '.py'})\par
00600     password = {\cf22 ''}\par
00601     {\cf19 for} i {\cf19 in} open({\cf22 'DONE'}, {\cf22 'r'}).read():\par
00602         password+=str(i)\par
00603     {\cf19 if} args.language == {\cf22 "SK"}:\par
00604         tqdm.write({\cf22 'Kontrolujem Hotovo'})\par
00605     {\cf19 if} args.language == {\cf22 "EN"}:\par
00606         tqdm.write({\cf22 'Controling Complete'})\par
00607     {\cf19 if} args.language == {\cf22 "JP"}:\par
00608         tqdm.write({\cf22 '\'E5\'88\'B6\'E5\'BE\'A1\'E5\'AE\'8C\'E4\'BA\'86'})\par
00609     os.remove({\cf22 'DONE'})\par
00610     progress_bar_check += 1\par
00611     {\cf19 return} [password, name]\par
00612 \par
00613 {\cf17 def }find(name):\par
00614     {\cf20 # Creating a file, writing to it, and then running it.}\par
00615     \par
00616     {\cf17 global} progress_bar_check\par
00617     findname = str(datetime.now().strftime({\cf22 "%H-%M-%S"}))\par
00618     crfind = open(findname + {\cf22 ".py"}, {\cf22 "w"})\par
00619     crfind.write(findapp)\par
00620     crfind.close()\par
00621     {\cf19 if} args.language == {\cf22 "SK"}:\par
00622         tqdm.write({\cf22 'H\'C4\'BEad\'C3\'A1m ...'}, end={\cf22 '\\r'})\par
00623     {\cf19 if} args.language == {\cf22 "EN"}:\par
00624         tqdm.write({\cf22 'Finding ...'}, end={\cf22 '\\r'})\par
00625     {\cf19 if} args.language == {\cf22 "JP"}:\par
00626         tqdm.write({\cf22 '\'E7\'99\'BA\'E8\'A6\'8B ...'}, end={\cf22 '\\r'})\par
00627     subprocess.check_output({\cf22 'start '} + findname + {\cf22 '.py '} + str(name) + {\cf22 ' '} + str(loginvstupuser), shell={\cf17 True})\par
00628     {\cf19 while} {\cf17 True}:\par
00629         leave = {\cf17 False}\par
00630         {\cf19 for} i {\cf19 in} os.listdir():\par
00631             {\cf19 if} i == {\cf22 'DONE'}:\par
00632                 leave = {\cf17 True}\par
00633                 {\cf19 break}\par
00634         {\cf19 if} leave:\par
00635             sleep(0.05)\par
00636             {\cf19 break}\par
00637     os.remove(findname + {\cf22 '.py'})\par
00638     os.remove(name)\par
00639     os.remove({\cf22 'DONE'})\par
00640     test = open(loginvstupuser, {\cf22 'r'})\par
00641     end = {\cf17 False}\par
00642     pocitadlo = 0\par
00643     {\cf19 for} i {\cf19 in} test.read():\par
00644         pocitadlo += 1\par
00645     {\cf19 if} 0 <= pocitadlo <= 5:\par
00646         test.close()\par
00647         {\cf19 if} args.language == {\cf22 "SK"}:\par
00648             tqdm.write({\cf22 'H\'C4\'BEad\'C3\'A1m CHYBA'})\par
00649         {\cf19 if} args.language == {\cf22 "EN"}:\par
00650             tqdm.write({\cf22 'Finding ERROR'})\par
00651         {\cf19 if} args.language == {\cf22 "JP"}:\par
00652             tqdm.write({\cf22 '\'E7\'99\'BA\'E8\'A6\'8B \'E3\'82\'A8\'E3\'83\'A9\'E3\'83\'BC'})\par
00653         end = {\cf17 True}\par
00654     {\cf19 if} end:\par
00655         {\cf19 return} (loginvstupuser, end)\par
00656     test.close()\par
00657     {\cf19 if} args.language == {\cf22 "SK"}:\par
00658         tqdm.write({\cf22 'H\'C4\'BEad\'C3\'A1m Hotovo'})\par
00659     {\cf19 if} args.language == {\cf22 "EN"}:\par
00660         tqdm.write({\cf22 'Finding Complete'})\par
00661     {\cf19 if} args.language == {\cf22 "JP"}:\par
00662         tqdm.write({\cf22 '\'E7\'99\'BA\'E8\'A6\'8B\'E5\'AE\'8C\'E4\'BA\'86'})\par
00663     progress_bar_check += 1\par
00664     {\cf19 return} [loginvstupuser, end]\par
00665 \par
00666 {\cf17 def }code(name, new, mode=0):\par
00667     {\cf22 """}\par
00668 {\cf22     The code function }{\cf19 is} used to encrypt files.\par
00669     It takes two arguments: name, new.\par
00670     name {\cf19 is} the file that will be encrypted.\par
00671     new {\cf19 is} the password {\cf19 for} encryption.\par
00672     \par
00673     :param name: Get the name of the file to be encrypted\par
00674     :param new: Save the new password\par
00675     :param mode=0: Encrypt the file\par
00676     :{\cf19 return}: The name of the file {\cf19 and} the new value\par
00677     {\cf22 """}\par
00678 {\cf22     }\par
00679 {\cf22     }{\cf17 global} progress_bar_check\par
00680     codename = str(datetime.now().strftime({\cf22 "%H-%M-%S"}))\par
00681     crcode = open(codename + {\cf22 ".py"}, {\cf22 "w"})\par
00682     crcode.write(codeapp)\par
00683     crcode.close()\par
00684     {\cf19 if} args.language == {\cf22 "SK"}:\par
00685         tqdm.write({\cf22 'Zakoduv\'E1vam ...'}, end={\cf22 '\\r'})\par
00686     {\cf19 if} args.language == {\cf22 "EN"}:\par
00687         tqdm.write({\cf22 'Coding ...'}, end={\cf22 '\\r'})\par
00688     {\cf19 if} args.language == {\cf22 "JP"}:\par
00689         tqdm.write({\cf22 '\'E3\'82\'B3\'E3\'83\'BC\'E3\'83\'87\'E3\'82\'A3\'E3\'83\'B3\'E3\'82\'B0 ...'}, end={\cf22 '\\r'})\par
00690     {\cf19 if} mode == 1:\par
00691         file = open({\cf22 '1'}, {\cf22 'w'})\par
00692         file.write(str(name) + {\cf22 ' = '} + str(new))\par
00693         file.close()\par
00694         subprocess.check_output({\cf22 'start '} + codename + {\cf22 '.py 1'}, shell={\cf17 True})\par
00695     {\cf19 if} mode == 0:\par
00696         subprocess.check_output({\cf22 'start '} + codename + {\cf22 '.py '} + str(name[0]), shell={\cf17 True})\par
00697     {\cf19 while} {\cf17 True}:\par
00698         leave = {\cf17 False}\par
00699         {\cf19 for} i {\cf19 in} os.listdir():\par
00700             {\cf19 if} i == {\cf22 'DONE'}:\par
00701                 leave = {\cf17 True}\par
00702                 {\cf19 break}\par
00703         {\cf19 if} leave:\par
00704             sleep(0.05)\par
00705             {\cf19 break}\par
00706     {\cf19 if} args.language == {\cf22 "SK"}:\par
00707         tqdm.write({\cf22 'Zakoduv\'E1vam Complete'})\par
00708     {\cf19 if} args.language == {\cf22 "EN"}:\par
00709         tqdm.write({\cf22 'Coding Complete'})\par
00710     {\cf19 if} args.language == {\cf22 "JP"}:\par
00711         tqdm.write({\cf22 '\'E3\'82\'B3\'E3\'83\'BC\'E3\'83\'87\'E3\'82\'A3\'E3\'83\'B3\'E3\'82\'B0 \'E5\'AE\'8C\'E4\'BA\'86'})\par
00712     os.remove(codename + {\cf22 '.py'})\par
00713     {\cf19 if} mode == 0 {\cf19 and} new == {\cf22 'justcode'}:\par
00714         {\cf19 pass}\par
00715     {\cf19 elif} mode == 0 {\cf19 and} new:\par
00716         os.remove(loginvstupuser + {\cf22 'crypted'})\par
00717         shutil.move(loginvstupuser + {\cf22 'cryptedcrypted'}, loginvstupuser + {\cf22 'crypted'})\par
00718     {\cf19 elif} mode == 0:\par
00719         os.remove(loginvstupuser)\par
00720     progress_bar_check += 1\par
00721     os.remove({\cf22 'DONE'})\par
00722     {\cf19 if} mode == 1:\par
00723         file = open({\cf22 '1crypted'}, {\cf22 'r'})\par
00724         savelog = file.readlines()\par
00725         file.close()\par
00726         os.remove({\cf22 '1'})\par
00727         os.remove({\cf22 '1crypted'})\par
00728         {\cf19 return} savelog\par
00729     {\cf19 return} name[1], new\par
00730 \par
00731 {\cf17 def }mouseclick(time=0):\par
00732     {\cf22 """}\par
00733 {\cf22     The mouseclick function }{\cf19 is} used to click the F11 key on the keyboard.\par
00734     This function {\cf19 is} useful {\cf19 for} maximizing a window.\par
00735     \par
00736     :param time=0: Make the mouseclick function run {\cf19 for} a specified amount of time\par
00737     :{\cf19 return}: The time it takes to click the mouse\par
00738     {\cf22 """}\par
00739 {\cf22     }\par
00740 {\cf22     }{\cf19 while} {\cf17 True}:\par
00741         state_left = win32api.GetKeyState(0x01)   {\cf20 # type: ignore}\par
00742         a = win32api.GetKeyState(0x01)   {\cf20 # type: ignore}\par
00743         {\cf19 if} state_left == -127 {\cf19 or} state_left == -128 {\cf19 or} time != 0:\par
00744             sleep(2 + time)\par
00745             pg.press({\cf22 'f11'})\par
00746             pg.keyDown({\cf22 'ctrl'})\par
00747             pg.press({\cf22 'w'})\par
00748             pg.keyUp({\cf22 'ctrl'})\par
00749             {\cf19 break}\par
00750         {\cf19 else}:\par
00751             {\cf19 pass}\par
00752 \par
00753 {\cf17 def }playhtml(htmlFile, mode=0, time=0):\par
00754     {\cf22 """}\par
00755 {\cf22     The playhtml function }{\cf19 is} used to open the html file containing the game{\cf22 's intro.}\par
00756 {\cf22     It can be called }{\cf19 in} two ways:\par
00757         1) playhtml(htmlFile, mode=0, time=0):  {\cf20 # mode = 0 means that it will click through all of the intro automatically. }\par
00758                                                 {\cf20 # time = 0 means that it will not wait for a specific amount of time before clicking}\par
00759                                                 {\cf20 # through each part of the intro.}\par
00760     \par
00761     :param htmlFile: Specify which html file to open\par
00762     :param mode=0: Determine whether the function {\cf19 is} used to start a new game {\cf19 or} load an existing one\par
00763     :param time=0: Make the mouseclick function wait a certain amount of time\par
00764     :{\cf19 return}: Nothing\par
00765     :doc-author: Trelent\par
00766     {\cf22 """}\par
00767 {\cf22     }\par
00768 {\cf22     }{\cf19 if} args.nointro == {\cf18 None} {\cf19 or} args.nointrof == {\cf18 None}:\par
00769         args.nointrof = object()\par
00770         {\cf19 if} args.test == {\cf18 None} {\cf19 and} config.get({\cf22 'basic info'},{\cf22 'intro'}).split({\cf22 ' '})[0] == {\cf22 'True'}:\par
00771             {\cf19 if} args.language == {\cf22 'SK'}:\par
00772                 webbrowser.open(htmlFile + {\cf22 '_sk.html'}, 1)\par
00773             {\cf19 if} args.language == {\cf22 'EN'}:\par
00774                 webbrowser.open(htmlFile + {\cf22 '.html'}, 1)\par
00775             {\cf19 if} args.language == {\cf22 'JP'}:\par
00776                 webbrowser.open(htmlFile + {\cf22 '_jp.html'}, 1)\par
00777             sleep(1)\par
00778             pg.press({\cf22 'f11'})\par
00779             {\cf19 if} mode == 0:\par
00780                 mouseclick()\par
00781             {\cf19 elif} mode == 1:\par
00782                 mouseclick(time=time)\par
00783         {\cf19 else}:\par
00784             {\cf19 pass}\par
00785     {\cf19 else}:\par
00786         {\cf19 if} config.get({\cf22 'basic info'},{\cf22 'intro'}).split({\cf22 ' '})[0] == {\cf22 'True'}:\par
00787             {\cf19 if} args.language == {\cf22 'SK'}:\par
00788                 webbrowser.open(htmlFile + {\cf22 '_sk.html'}, 1)\par
00789             {\cf19 if} args.language == {\cf22 'EN'}:\par
00790                 webbrowser.open(htmlFile + {\cf22 '.html'}, 1)\par
00791             {\cf19 if} args.language == {\cf22 'JP'}:\par
00792                 webbrowser.open(htmlFile + {\cf22 '_jp.html'}, 1)\par
00793             sleep(1.5)\par
00794             pg.press({\cf22 'f11'})\par
00795             {\cf19 if} mode == 0:\par
00796                 mouseclick()\par
00797             {\cf19 elif} mode == 1:\par
00798                 mouseclick(time=time)\par
00799             {\cf19 if} args.test != {\cf18 None}:\par
00800                 win32gui.SetForegroundWindow(pywinauto.findwindows.find_window(title={\cf22 'Zn\'E1mE'}))   {\cf20 # type: ignore}\par
00801         {\cf19 else}:\par
00802             {\cf19 pass}\par
00803 \par
00804 {\cf17 def }main():\par
00805     {\cf22 """}\par
00806 {\cf22     The main function. This }{\cf19 is} where the program starts. It {\cf19 is} the first function called.\par
00807     {\cf22 """}\par
00808 {\cf22     }\par
00809 {\cf22     historyname = str(datetime.now().strftime("%H-%M-%S"}))\par
00810     history = open(historyname, {\cf22 'w'})\par
00811     {\cf19 if} args.nointrof == {\cf18 None}:\par
00812         history.write({\cf22 '[*restarted]\\n'})\par
00813     logged = {\cf17 False}\par
00814     exit = {\cf17 False}\par
00815     {\cf17 global} password\par
00816     {\cf19 if} args.language == {\cf22 "SK"}:\par
00817         print({\cf22 'Jazyk = SK\\n\\nZa\'C4\'8D\'C3\'ADnam rozba\'C4\'BEova\'C5\'A5\\n'})\par
00818     {\cf19 if} args.language == {\cf22 "EN"}:\par
00819         print({\cf22 'Language = EN\\n\\nStarting to extract\\n'})\par
00820     {\cf19 if} args.language == {\cf22 "JP"}:\par
00821         print({\cf22 "\'E8\'A8\'80\'E8\'AA\'9E = \'E6\'97\'A5\'E6\'9C\'AC\'E8\'AA\'9E\\n\\n\'E6\'8A\'BD\'E5\'87\'BA\'E9\'96\'8B\'E5\'A7\'8B\\n"})\par
00822     sleep(0.25)\par
00823     {\cf19 try}:\par
00824         \par
00825         {\cf22 """}\par
00826 {\cf22         Extract the zip file containing the data.}\par
00827 {\cf22         }{\cf21 @param} cachename - the name of the zip file containing the data.\par
00828         {\cf22 """}\par
00829 {\cf22         }\par
00830 {\cf22         }{\cf17 with} zipfile.ZipFile(cachename, mode={\cf22 'r'}) {\cf17 as} zip:\par
00831             {\cf19 if} args.language == {\cf22 "SK"}:\par
00832                 {\cf19 for} member {\cf19 in} tqdm(iterable=zip.namelist(), total=len(zip.namelist()), desc={\cf22 'Rozba\'C4\'BEujem '}):\par
00833                     {\cf19 try}:\par
00834                         zip.extract(member)\par
00835                         tqdm.write(f{\cf22 "\{os.path.basename(member)\}("} + str(os.path.getsize(member)) + {\cf22 "B)"})\par
00836                         sleep(0.01)\par
00837                     {\cf19 except} zipfile.error {\cf17 as} e:\par
00838                         {\cf19 pass}\par
00839             {\cf19 elif} args.language == {\cf22 "EN"}:\par
00840                 {\cf19 for} member {\cf19 in} tqdm(iterable=zip.namelist(), total=len(zip.namelist()), desc={\cf22 'Extracting '}):\par
00841                     {\cf19 try}:\par
00842                         zip.extract(member)\par
00843                         tqdm.write(f{\cf22 "\{os.path.basename(member)\}("} + str(os.path.getsize(member)) + {\cf22 "B)"})\par
00844                         sleep(0.01)\par
00845                     {\cf19 except} zipfile.error {\cf17 as} e:\par
00846                         {\cf19 pass}\par
00847             {\cf19 elif} args.language == {\cf22 "JP"}:\par
00848                 {\cf19 for} member {\cf19 in} tqdm(iterable=zip.namelist(), total=len(zip.namelist()), desc={\cf22 '\'E6\'8A\'BD\'E5\'87\'BA\'E4\'B8\'AD '}):\par
00849                     {\cf19 try}:\par
00850                         zip.extract(member)\par
00851                         tqdm.write(f{\cf22 "\{os.path.basename(member)\}("} + str(os.path.getsize(member)) + {\cf22 "B)"})\par
00852                         sleep(0.01)\par
00853                     {\cf19 except} zipfile.error {\cf17 as} e:\par
00854                         {\cf19 pass}\par
00855             zip.close()\par
00856         {\cf19 if} args.language == {\cf22 "SK"}:\par
00857             print({\cf22 'Hotovo\\n'})\par
00858             sleep(0.25)\par
00859             print({\cf22 "Rozba\'C4\'BEujem druhu \'C4\'8Das\'C5\'A5...\\n"})\par
00860         {\cf19 if} args.language == {\cf22 "EN"}:\par
00861             print({\cf22 'Done\\n'})\par
00862             sleep(0.25)\par
00863             print({\cf22 "Unpacking second part...\\n"})\par
00864         {\cf19 if} args.language == {\cf22 "JP"}:\par
00865             print({\cf22 '\'E7\'B5\'82\'E3\'82\'8F\'E3\'82\'8A\\n'})\par
00866             sleep(0.25)\par
00867             print({\cf22 "2 \'E7\'95\'AA\'E7\'9B\'AE\'E3\'81\'AE\'E9\'83\'A8\'E5\'88\'86\'E3\'82\'92\'E8\'A7\'A3\'E5\'87\'8D\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99...\\n"})\par
00868             \par
00869         {\cf22 """}\par
00870 {\cf22         Extract the data }{\cf17 from} the xp3 file.\par
00871         {\cf21 @param} xp3_file - the xp3 file to extract {\cf17 from}\par
00872         {\cf21 @param} output_folder - the folder to extract to\par
00873         {\cf21 @param} extract_name - the name of the file to extract\par
00874         {\cf21 @param} language - the language to extract\par
00875         {\cf22 """}\par
00876 {\cf22         }\par
00877 {\cf22         }{\cf19 if} args.language == {\cf22 "SK"}:\par
00878             subprocess.call([sys.executable, {\cf22 'xp3.py'}, {\cf22 'data.xp3'}, {\cf22 'data1'}, {\cf22 '-e'}, {\cf22 'neko_vol0_steam'}])\par
00879         {\cf19 if} args.language == {\cf22 "EN"}:\par
00880             subprocess.call([sys.executable, {\cf22 'xp3.py'}, {\cf22 'data.xp3'}, {\cf22 'data1'}, {\cf22 '-e'}, {\cf22 'neko_vol0_steam'}, {\cf22 '-lang'}, {\cf22 'EN'}])\par
00881         {\cf19 if} args.language == {\cf22 "JP"}:\par
00882             subprocess.call([sys.executable, {\cf22 'xp3.py'}, {\cf22 'data.xp3'}, {\cf22 'data1'}, {\cf22 '-e'}, {\cf22 'neko_vol0_steam'}, {\cf22 '-lang'}, {\cf22 'JP'}])\par
00883         shutil.move({\cf22 'data1/data'}, {\cf22 'data'})\par
00884         shutil.rmtree({\cf22 'data1'})\par
00885         os.remove(cachename)\par
00886         os.remove({\cf22 'data.xp3'})\par
00887         {\cf19 if} args.language == {\cf22 "SK"}:\par
00888             print({\cf22 '\\nHotovo\\n'})\par
00889         {\cf19 if} args.language == {\cf22 "EN"}:\par
00890             print({\cf22 '\\nDone\\n'})\par
00891         {\cf19 if} args.language == {\cf22 "JP"}:\par
00892             print({\cf22 '\\n\'E5\'AE\'8C\'E4\'BA\'86\\n'})\par
00893         sleep(0.5)\par
00894         check = open({\cf22 'data'}, {\cf22 'r'})\par
00895         check_new = open({\cf22 'data_dummy'}, {\cf22 'w'})\par
00896         {\cf19 for} i {\cf19 in} check.read():\par
00897                 {\cf19 if} i == {\cf22 "G"}:\par
00898                     check_new.write({\cf22 "["})\par
00899                 {\cf19 else}:\par
00900                     check_new.write(i)\par
00901         check.close()\par
00902         check_new.close()\par
00903         os.mkdir({\cf22 "temp"})\par
00904         shutil.move({\cf22 "data_dummy"}, {\cf22 'temp/'})\par
00905         os.remove({\cf22 'data'})\par
00906         shutil.move({\cf22 "temp/data_dummy"}, {\cf22 'data'})\par
00907         shutil.rmtree({\cf22 'temp'})\par
00908         os.rename({\cf22 'data_dummy'}, {\cf22 'data'})\par
00909     {\cf19 except} FileNotFoundError:\par
00910         {\cf19 pass}\par
00911     os.system({\cf22 'cls'})\par
00912     \par
00913     {\cf22 """}\par
00914 {\cf22         this function prints the version of the program }\par
00915 {\cf22     """}\par
00916 {\cf22     }\par
00917 {\cf22     verzia = open('version'}, {\cf22 'r'})\par
00918     {\cf19 if} args.language == {\cf22 "SK"}:\par
00919         print({\cf22 'Pou\'9E\'EDvate Zn\'E1mE '} + verzia.read() + {\cf22 "\\n"})\par
00920     {\cf19 if} args.language == {\cf22 "EN"}:\par
00921         print({\cf22 'You\\'re using Zn\'E1mE '} + verzia.read() + {\cf22 "\\n"})\par
00922     {\cf19 if} args.language == {\cf22 "JP"}:\par
00923         print({\cf22 'Zn\'C3\'A1mE \'E3\'82\'92\'E4\'BD\'BF\'E7\'94\'A8\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99 '} + verzia.read() + {\cf22 "\\n"})\par
00924     verzia.close()\par
00925     inactive1 = {\cf17 False}\par
00926     {\cf22 """}\par
00927 {\cf22     If the INACTIVE file }{\cf19 is} present, delete it {\cf19 and} {\cf19 print} a message to the user indicating that they have been logged out.\par
00928     {\cf21 @param} root - the root directory of the file system\par
00929     {\cf21 @param} dirs - the directories {\cf19 in} the root directory\par
00930     {\cf21 @param} files - the files {\cf19 in} the root directory\par
00931     {\cf21 @returns} nothing\par
00932     {\cf22 """}\par
00933 {\cf22     }{\cf19 try}:\par
00934         {\cf19 for} root, dirs, files {\cf19 in} os.walk({\cf22 '..\\\\'}):\par
00935             {\cf19 for} i {\cf19 in} files:\par
00936                 {\cf19 if} i == {\cf22 'INACTIVE'}:\par
00937                     inactive1 = {\cf17 True}\par
00938                     os.remove({\cf22 'INACTIVE'})\par
00939                     sleep(0.25)\par
00940                     {\cf19 if} args.language == {\cf22 "SK"}:\par
00941                         print({\cf22 'Bol si neakt\'EDvny, bol si odhl\'E1sen\'FD a program sa re\'9Atartoval!!!\\n'})\par
00942                     {\cf19 if} args.language == {\cf22 "EN"}:\par
00943                         print({\cf22 'You were inactive, you were logged out and the program restarted!!!\\n'})\par
00944                     {\cf19 if} args.language == {\cf22 "JP"}:\par
00945                         print({\cf22 '\'E9\'9D\'9E\'E3\'82\'A2\'E3\'82\'AF\'E3\'83\'86\'E3\'82\'A3\'E3\'83\'96\'E3\'81\'A7\'E3\'81\'97\'E3\'81\'9F\'E3\'80\'82\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A2\'E3\'82\'A6\'E3\'83\'88\'E3\'81\'97\'E3\'80\'81\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'82\'92\'E5\'86\'8D\'E8\'B5\'B7\'E5\'8B\'95\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F!!!\\n'})\par
00946         {\cf19 if} args.update == {\cf18 None}:\par
00947             sleep(0.25)\par
00948             {\cf19 if} args.language == {\cf22 "SK"}:\par
00949                 print({\cf22 'Program bol aktualizovan\'FD!!!\\n'})\par
00950             {\cf19 if} args.language == {\cf22 "EN"}:\par
00951                 print({\cf22 'Program was updated!!!\\n'})\par
00952             {\cf19 if} args.language == {\cf22 "JP"}:\par
00953                 print({\cf22 '\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'81\'8C\'E6\'9B\'B4\'E6\'96\'B0\'E3\'81\'95\'E3\'82\'8C\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F!!!\\n'})\par
00954     {\cf19 except} Exception:\par
00955         {\cf19 pass}\par
00956     {\cf22 """}\par
00957 {\cf22     If the language }{\cf19 is} Japanese, {\cf19 print} a message that tells the user to watch the help file.\par
00958     {\cf21 @param} args - the command line arguments\par
00959     {\cf22 """}\par
00960 {\cf22     }{\cf19 if} args.language == {\cf22 'JP'}:\par
00961         print({\cf22 "If you don't see any of characters watch 'help.txt'\\n\'E3\'82\'A4\'E3\'83\'B3\'E3\'82\'BF\'E3\'83\'BC\'E3\'83\'8D\'E3\'83\'83\'E3\'83\'88\'E6\'8E\'A5\'E7\'B6\'9A\'E3\'81\'8C\'E3\'83\'80\'E3\'82\'A6\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99\\n"})\par
00962     tologin = {\cf17 False}\par
00963     restart = {\cf17 False}\par
00964     topassword = {\cf17 False}\par
00965     topasswordhelp = {\cf17 False}\par
00966     loggedhelp = {\cf17 False}\par
00967     firstlogin = {\cf17 True}\par
00968     vstup = {\cf18 None}\par
00969     logins = 0\par
00970     help = [{\cf22 'help'},{\cf22 'pomoc'},{\cf22 '-h'},{\cf22 '-help'},{\cf22 '?'},{\cf22 '-?'}]\par
00971     advhelp = [{\cf22 'advanced help'},{\cf22 'ah'},{\cf22 '-ah'},{\cf22 '-advanced help'}]\par
00972     linenumber = 1 {\cf20 # type: ignore}\par
00973     {\cf22 """}\par
00974 {\cf22     If the user has }{\cf19 not} disabled the intro, play it. Otherwise, do nothing.\par
00975     {\cf21 @param} {\cf18 None}\par
00976     {\cf21 @return} {\cf18 None}\par
00977     {\cf22 """}\par
00978 {\cf22     }{\cf19 if} {\cf19 not} inactive1:\par
00979         playhtml({\cf22 'apphtml\\\\start'}, 1, 3,)\par
00980     getWindow(1)\par
00981     {\cf19 if} args.nointro == {\cf18 None} {\cf19 or} config.get({\cf22 'basic info'},{\cf22 'intro'}).split({\cf22 ' '})[0] == {\cf22 'False'}:\par
00982         {\cf19 pass}\par
00983     {\cf19 else}:\par
00984         win32gui.SetForegroundWindow(pywinauto.findwindows.find_window(title={\cf22 'frame2'})) {\cf20 # type: ignore}\par
00985         {\cf19 if} args.test != {\cf18 None}:\par
00986             win32gui.SetForegroundWindow(pywinauto.findwindows.find_window(title={\cf22 'Zn\'E1mE'})) {\cf20 # type: ignore}\par
00987     getImg({\cf22 'assets/banner.png'}, {\cf22 'banner'}, 0, 0, screensize[0], int((round((322/1736)*screensize[0], 0))))\par
00988     move({\cf22 'Zn\'E1mE'},0,int((round((322/1736)*screensize[0], 0))-35),screensize[0],screensize[1]-int((round((322/1736)*screensize[0], 0))))\par
00989     {\cf19 while} {\cf17 True}:\par
00990         {\cf19 if} {\cf19 not} exit:\par
00991             {\cf17 global} loginvstupuser\par
00992             {\cf19 if} logged:\par
00993                 {\cf19 if} firstlogin:\par
00994                     logins += 1\par
00995                     firstlogin = {\cf17 False}\par
00996                     shutil.copy2({\cf22 'data'}, {\cf22 'data_backup'})\par
00997                     {\cf22 """}\par
00998 {\cf22                     If the user wants to save their login credentials, save them to a file.}\par
00999 {\cf22                     }{\cf21 @param} loginvstupuser - the username {\cf19 for} the login credentials\par
01000                     {\cf21 @param} password - the password {\cf19 for} the login credentials\par
01001                     {\cf21 @param} savefilemode - whether {\cf19 or} {\cf19 not} we are saving the file {\cf19 or} {\cf19 not}\par
01002                     {\cf22 """}\par
01003 {\cf22                     }{\cf19 if} savefilemode:   {\cf20 # type: ignore}\par
01004                         flvstup = {\cf22 ''}\par
01005                         linenumber -= 1\par
01006                     {\cf19 elif} args.language == {\cf22 "SK"}:\par
01007                         flvstup = input(str(linenumber) + {\cf22 "Chcete si ulo\'C5\'BEi\'C5\'A5 svoje prihlasovacie \'C3\'BAdaje? (y/N) > "})\par
01008                     {\cf19 elif} args.language == {\cf22 "EN"}:\par
01009                         flvstup = input(str(linenumber) + {\cf22 "Do you want to save your login credentials? (y/N) > "})\par
01010                     {\cf19 elif} args.language == {\cf22 "JP"}:\par
01011                         flvstup = input(str(linenumber) + {\cf22 "\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E8\'B3\'87\'E6\'A0\'BC\'E6\'83\'85\'E5\'A0\'B1\'E3\'82\'92\'E4\'BF\'9D\'E5\'AD\'98\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99\'E3\'81\'8B? (y/N) > "})\par
01012                     {\cf19 else}:\par
01013                         flvstup = input({\cf22 "Do you want to save your login credentials? (y/N) > "})\par
01014                     flvstup.lower()\par
01015                     {\cf19 if} flvstup == {\cf22 "y"}:\par
01016                         {\cf19 if} {\cf19 not} os.path.isfile({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"}):\par
01017                             os.mkdir({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/"})\par
01018                         savelog = open({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"}, {\cf22 "w"})\par
01019                         tolog = str(code(str(loginvstupuser),str(password[0]), mode=1))  {\cf20 # type: ignore}\par
01020                         tolog = tolog[2:len(tolog)-2]\par
01021                         savelog.write(tolog)\par
01022                         savelog.close()\par
01023                 {\cf22 """}\par
01024 {\cf22                 Prints the help menu }{\cf19 for} the program.\par
01025                 {\cf21 @param} loggedhelp - whether {\cf19 or} {\cf19 not} the help menu has been printed already.\par
01026                 {\cf21 @param} args - the arguments passed to the program.\par
01027                 {\cf22 """}\par
01028 {\cf22                 }{\cf19 if} loggedhelp:\par
01029                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01030                         print({\cf22 "'zz' pre zobrazenie zn\'E1mok\\n'pz' pre pridanie zn\'E1mok"})\par
01031                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01032                         print({\cf22 "'zz' to display marks\\n'pz' to add marks"})\par
01033                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01034                         print({\cf22 '\'E3\'80\'8Czz\'E3\'80\'8D\'E3\'81\'A7\'E3\'83\'9E\'E3\'83\'BC\'E3\'82\'AF\'E3\'82\'92\'E8\'A1\'A8\'E7\'A4\'BA\\n\'E3\'80\'8Cpz\'E3\'80\'8D\'E3\'81\'A7\'E3\'83\'9E\'E3\'83\'BC\'E3\'82\'AF\'E3\'82\'92\'E8\'BF\'BD\'E5\'8A\'A0'})\par
01035                     loggedhelp = {\cf17 False}\par
01036                 vstup = input(str(linenumber) + {\cf22 ' > '})\par
01037                 linenumber += 1\par
01038                 history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + vstup + {\cf22 ']\\n'})\par
01039                 vstup.lower()\par
01040                 history.close()\par
01041                 history = open(historyname, {\cf22 'a'})\par
01042                 {\cf22 """}\par
01043 {\cf22                 Check }{\cf19 if} the user has asked {\cf19 for} help. If so, {\cf19 print} the help message.\par
01044                 {\cf21 @param} vstup - the user input string\par
01045                 {\cf21 @returns} {\cf17 True} {\cf19 if} the user has asked {\cf19 for} help, {\cf17 False} otherwise\par
01046                 {\cf22 """}\par
01047 {\cf22                 help = ['help'},{\cf22 'pomoc'},{\cf22 '-h'},{\cf22 '-help'},{\cf22 '?'},{\cf22 '-?'}]\par
01048                 {\cf19 for} i {\cf19 in} range(len(help)):\par
01049                     {\cf19 if} vstup == help[i]:\par
01050                         loggedhelp = {\cf17 True}\par
01051                 {\cf19 if} loggedhelp:\par
01052                     {\cf19 continue}\par
01053                 {\cf19 if} vstup == {\cf22 'delsavlog'}:\par
01054                     subprocess.check_output({\cf22 'start uninstall.py '}, shell={\cf17 True})\par
01055                     \par
01056                 {\cf20 # Reading a file and printing it out.}\par
01057                     \par
01058                 {\cf19 if} vstup == {\cf22 "zz"}:\par
01059                     passwordfile = open(password[1], {\cf22 'r'})  {\cf20 # type: ignore}\par
01060                     countersubject = 0\par
01061                     counter = 6\par
01062                     counterfirst = {\cf17 True}\par
01063                     {\cf19 for} i {\cf19 in} passwordfile.read():\par
01064                         {\cf19 if} counter != 0:\par
01065                             counter -= 1\par
01066                             {\cf19 continue}\par
01067                         {\cf19 try}:\par
01068                             {\cf19 if} i == {\cf22 '\\n'}:\par
01069                                 print({\cf22 '\\n'}, end={\cf22 ""})\par
01070                                 {\cf19 continue}\par
01071                             int(i)\par
01072                             {\cf19 if} counterfirst:\par
01073                                 print(i, end={\cf22 ""})\par
01074                             {\cf19 else}:\par
01075                                 print({\cf22 ','}+i, end={\cf22 ""})\par
01076                         {\cf19 except} Exception:\par
01077                             {\cf19 if} countersubject > 2:\par
01078                                 countersubject = 0\par
01079                             counterfirst = {\cf17 True}\par
01080                             countersubject += 1\par
01081                             print(i, end={\cf22 ""})\par
01082                             {\cf19 if} countersubject > 2:\par
01083                                 print({\cf22 " | "}, end={\cf22 ""})\par
01084                     passwordfile.close()\par
01085                 {\cf22 """}\par
01086 {\cf22                 This function }{\cf19 is} used to add a new subject to the database. It {\cf19 is} called when the user\par
01087                 enters the subject {\cf19 and} mark {\cf19 for} a new subject. It will then call the code function to\par
01088                 encrypt the data {\cf19 and} save it to the database.\par
01089                 {\cf21 @param} subject - the subject to be added to the database.\par
01090                 {\cf21 @param} mark - the mark {\cf19 for} the subject.\par
01091                 {\cf22 """}\par
01092 {\cf22                 }{\cf19 if} vstup == {\cf22 "pz"}:\par
01093                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01094                         subject = input(str(linenumber) + {\cf22 ' Predmet > '})\par
01095                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + subject + {\cf22 ']\\n'})\par
01096                         vstup.lower()\par
01097                         history.close()\par
01098                         history = open(historyname, {\cf22 'a'})\par
01099                         {\cf19 if} subject == {\cf22 'quit'}:\par
01100                             exit = {\cf17 True}\par
01101                             {\cf19 continue}\par
01102                         {\cf19 if} subject == {\cf22 'back'}:\par
01103                             {\cf19 continue}\par
01104                         mark = input(str(linenumber) + {\cf22 ' Zn\'E1mka > '})\par
01105                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + mark + {\cf22 ']\\n'})\par
01106                         vstup.lower()\par
01107                         history.close()\par
01108                         history = open(historyname, {\cf22 'a'})\par
01109                     {\cf19 elif} args.language == {\cf22 "EN"}:\par
01110                         subject = input(str(linenumber) + {\cf22 ' Subject > '})\par
01111                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + subject + {\cf22 ']\\n'})\par
01112                         vstup.lower()\par
01113                         history.close()\par
01114                         history = open(historyname, {\cf22 'a'})\par
01115                         {\cf19 if} subject == {\cf22 'quit'}:\par
01116                             exit = {\cf17 True}\par
01117                             {\cf19 continue}\par
01118                         {\cf19 if} subject == {\cf22 'back'}:\par
01119                             {\cf19 continue}\par
01120                         mark = input(str(linenumber) + {\cf22 ' Mark > '})\par
01121                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + (mark) + {\cf22 ']\\n'})\par
01122                         vstup.lower()\par
01123                         history.close()\par
01124                         history = open(historyname, {\cf22 'a'})\par
01125                     {\cf19 elif} args.language == {\cf22 "JP"}:\par
01126                         subject = input(str(linenumber) + {\cf22 ' \'E4\'B8\'BB\'E9\'A1\'8C > '})\par
01127                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + subject + {\cf22 ']\\n'})\par
01128                         vstup.lower()\par
01129                         history.close()\par
01130                         history = open(historyname, {\cf22 'a'})\par
01131                         {\cf19 if} subject == {\cf22 'quit'}:\par
01132                             exit = {\cf17 True}\par
01133                             {\cf19 continue}\par
01134                         {\cf19 if} subject == {\cf22 'back'}:\par
01135                             {\cf19 continue}\par
01136                         mark = input(str(linenumber) + {\cf22 ' \'E3\'83\'9E\'E3\'83\'BC\'E3\'82\'AF > '})\par
01137                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + mark + {\cf22 ']\\n'})\par
01138                         vstup.lower()\par
01139                         history.close()\par
01140                         history = open(historyname, {\cf22 'a'})\par
01141                     {\cf19 else}:\par
01142                         subject = input(str(linenumber) + {\cf22 ' Subject > '})\par
01143                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + subject + {\cf22 ']\\n'})\par
01144                         vstup.lower()\par
01145                         history.close()\par
01146                         history = open(historyname, {\cf22 'a'})\par
01147                         {\cf19 if} subject == {\cf22 'quit'}:\par
01148                             exit = {\cf17 True}\par
01149                             {\cf19 continue}\par
01150                         {\cf19 if} subject == {\cf22 'back'}:\par
01151                             {\cf19 continue}\par
01152                         mark = input(str(linenumber) + {\cf22 ' Mark > '})\par
01153                         history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + mark + {\cf22 ']\\n'})\par
01154                         vstup.lower()\par
01155                         history.close()\par
01156                         history = open(historyname, {\cf22 'a'})\par
01157                     {\cf19 if} subject == {\cf22 'quit'} {\cf19 or} mark == {\cf22 'quit'}:\par
01158                         exit = {\cf17 True}\par
01159                         {\cf19 continue}\par
01160                     {\cf19 if} subject == {\cf22 'back'} {\cf19 or} mark == {\cf22 'back'}:\par
01161                         {\cf19 continue}\par
01162                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01163                         Thread(target=progress_bar, args=({\cf22 'Preverujem'}, 3,), daemon={\cf17 True}).start()\par
01164                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01165                         Thread(target=progress_bar, args=({\cf22 'Checking'}, 3,), daemon={\cf17 True}).start()\par
01166                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01167                         Thread(target=progress_bar, args=({\cf22 '\'E3\'83\'81\'E3\'82\'A7\'E3\'83\'83\'E3\'82\'AF\'E4\'B8\'AD'}, 3,), daemon={\cf17 True}).start()\par
01168                     code(add(decode({\cf17 True}, {\cf17 False}), loginvstupuser, subject, mark), {\cf22 'justcode'})\par
01169                     cv2.destroyAllWindows()\par
01170                     getImg({\cf22 'assets/banner.png'}, {\cf22 'banner'}, 0, 0, screensize[0], int((round((322/1736)*screensize[0], 0))))\par
01171                     os.mkdir({\cf22 "temp"})\par
01172                     shutil.move({\cf22 "data"}, {\cf22 'temp/'})\par
01173                     os.rename({\cf22 'data1crypted'}, {\cf22 'data'})\par
01174                     shutil.rmtree({\cf22 'temp'})\par
01175                     os.remove({\cf22 'data1'})\par
01176             {\cf19 if} topassword:\par
01177                 {\cf19 if} savefilemode:   {\cf20 # type: ignore}\par
01178                     vstup = savefile[9:15]   {\cf20 # type: ignore}\par
01179                     linenumber -= 1\par
01180                 {\cf19 elif} args.language == {\cf22 "SK"}:\par
01181                     vstup = input(str(linenumber) + {\cf22 ' Heslo > '})\par
01182                 {\cf19 elif} args.language == {\cf22 "EN"}:\par
01183                     vstup = input(str(linenumber) + {\cf22 ' Password > '})\par
01184                 {\cf19 elif} args.language == {\cf22 "JP"}:\par
01185                     vstup = input(str(linenumber) + {\cf22 ' \'E3\'83\'91\'E3\'82\'B9\'E3\'83\'AF\'E3\'83\'BC\'E3\'83\'89 > '})\par
01186                 {\cf19 else}:\par
01187                     vstup = input(str(linenumber) + {\cf22 ' Password > '})\par
01188                 linenumber += 1\par
01189                 history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + len(vstup)*{\cf22 '*'} + {\cf22 ']\\n'})   {\cf20 # type: ignore}\par
01190                 vstup.lower()\par
01191                 history.close()\par
01192                 history = open(historyname, {\cf22 'a'})\par
01193                 help = [{\cf22 'help'},{\cf22 'pomoc'},{\cf22 '-h'},{\cf22 '-help'},{\cf22 '?'},{\cf22 '-?'}]\par
01194                 {\cf19 for} i {\cf19 in} range(len(help)):\par
01195                     {\cf19 if} vstup == help[i]:\par
01196                         topasswordhelp = {\cf17 True}\par
01197                 {\cf22 """}\par
01198 {\cf22                 If the user has requested help, }{\cf19 print} the appropriate help message.\par
01199                 {\cf21 @param} topasswordhelp - the boolean value {\cf19 for} requesting help.\par
01200                 {\cf22 """}\par
01201 {\cf22                 }{\cf19 if} topasswordhelp:\par
01202                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01203                         print({\cf22 "6 \'C4\'8D\'C3\'ADselne heslo\\n 'back' pre menu\\n 'quit' pre koniec"})\par
01204                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01205                         print({\cf22 "6 numeric password\\n 'back' for menu\\n 'quit' for end"})\par
01206                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01207                         print({\cf22 '6\'E6\'A1\'81\'E3\'81\'AE\'E3\'83\'91\'E3\'82\'B9\'E3\'83\'AF\'E3\'83\'BC\'E3\'83\'89\\n \'E3\'83\'A1\'E3\'83\'8B\'E3\'83\'A5\'E3\'83\'BC\'E3\'81\'AE\'E3\'80\'8C\'E6\'88\'BB\'E3\'82\'8B\'E3\'80\'8D\\n \'E7\'B5\'82\'E4\'BA\'86\'E3\'81\'AE\'E3\'80\'8C\'E7\'B5\'82\'E4\'BA\'86\'E3\'80\'8D'})\par
01208                     topasswordhelp = {\cf17 False}\par
01209                     {\cf19 continue}\par
01210                 {\cf22 """}\par
01211 {\cf22                     this function }{\cf19 is} used to go back to the main menu {\cf19 if} the user wants to change their password. \par
01212                 {\cf22 """}\par
01213 {\cf22                 }{\cf19 if} vstup == {\cf22 "back"}:\par
01214                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01215                         print({\cf22 'Idem sp\'C3\'A4\'C5\'A5.'})\par
01216                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01217                         print({\cf22 'Going back.'})\par
01218                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01219                         print({\cf22 '\'E6\'88\'BB\'E3\'82\'8B\'E3\'80\'82'})\par
01220                     topassword = {\cf17 False}\par
01221                     os.remove(loginvstupuser + {\cf22 'crypted'})\par
01222                     {\cf19 continue}\par
01223                 {\cf22 """}\par
01224 {\cf22                 If the user types quit }{\cf19 or} koniec, remove the encrypted file {\cf19 and} exit the program.\par
01225                 {\cf21 @param} vstup - the user input\par
01226                 {\cf21 @returns} nothing\par
01227                 {\cf22 """}\par
01228 {\cf22                 }{\cf19 if} vstup == {\cf22 "quit"} {\cf19 or} vstup == {\cf22 "koniec"}:\par
01229                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01230                         print({\cf22 "Idem sp\'C3\'A4\'C5\'A5 a ukon\'C4\'8Dujem program."})\par
01231                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01232                         print({\cf22 "Going back and ending program."})\par
01233                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01234                         print({\cf22 '\'E6\'88\'BB\'E3\'81\'A3\'E3\'81\'A6\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'82\'92\'E7\'B5\'82\'E4\'BA\'86\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99\'E3\'80\'82'})\par
01235                     sleep(0.5)\par
01236                     os.remove(loginvstupuser + {\cf22 'crypted'})\par
01237                     exit = {\cf17 True}\par
01238                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01239                     Thread(target=progress_bar, args=({\cf22 'Preverujem'}, 2,), daemon={\cf17 True}).start()\par
01240                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01241                     Thread(target=progress_bar, args=({\cf22 'Checking'}, 2,), daemon={\cf17 True}).start()\par
01242                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01243                     Thread(target=progress_bar, args=({\cf22 '\'E3\'83\'81\'E3\'82\'A7\'E3\'83\'83\'E3\'82\'AF\'E4\'B8\'AD'}, 2,), daemon={\cf17 True}).start()\par
01244                 password = password(decode(loginvstupuser + {\cf22 'crypted'}, {\cf17 True}))  {\cf20 # type: ignore}\par
01245                 cv2.destroyAllWindows()\par
01246                 getImg({\cf22 'assets/banner.png'}, {\cf22 'banner'}, 0, 0, screensize[0], int((round((322/1736)*screensize[0], 0))))\par
01247                 sleep(0.1)\par
01248                 {\cf22 """}\par
01249 {\cf22                 If the user }{\cf19 is} logged {\cf19 in}, check {\cf19 if} the password {\cf19 is} correct. If it {\cf19 is}, then the user {\cf19 is} logged {\cf19 in}.\par
01250                 {\cf21 @param} vstup - the password input by the user           \par
01251                 {\cf22 """}\par
01252 {\cf22                 }{\cf19 if} vstup == password[0]:  {\cf20 # type: ignore}\par
01253                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01254                         print({\cf22 'Si prihlaseny\\n'})\par
01255                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01256                         print({\cf22 'You\\'re logged\\n'})\par
01257                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01258                         print({\cf22 '\'E3\'81\'82\'E3\'81\'AA\'E3\'81\'9F\'E3\'81\'AF\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99\\n'})\par
01259                     os.rename(loginvstupuser + {\cf22 'crypted'}, loginvstupuser)\par
01260                     passwordfile = open(loginvstupuser, {\cf22 'r'})\par
01261                     passwordfile1 = open(loginvstupuser + {\cf22 "1"}, {\cf22 'w'})\par
01262                     counter = 0\par
01263                     {\cf19 for} i {\cf19 in} passwordfile.read():\par
01264                         passwordfile1.write(i)\par
01265                     passwordfile.close()\par
01266                     passwordfile1.close()\par
01267                     os.remove(loginvstupuser)\par
01268                     os.rename(loginvstupuser + {\cf22 '1'}, loginvstupuser)\par
01269                     topassword = {\cf17 False}\par
01270                     logged = {\cf17 True}\par
01271                     {\cf19 if} os.path.exists({\cf22 "restart.py"}):\par
01272                         os.remove({\cf22 'restart.py'})\par
01273                         cv2.destroyAllWindows()\par
01274                         {\cf19 if} args.language == {\cf22 'SK'}:\par
01275                             print({\cf22 "V\'C5\'A1etko je nastaven\'C3\'A9!!!\\nM\'C3\'B4\'C5\'BEete pou\'C5\'BEi\'C5\'A5 program\\n"})\par
01276                         {\cf19 if} args.language == {\cf22 'EN'}:\par
01277                             print({\cf22 "All is set!!!\\nYou can use progam\\n"})\par
01278                         {\cf19 if} args.language == {\cf22 'JP'}:\par
01279                             print({\cf22 "\'E3\'81\'99\'E3\'81\'B9\'E3\'81\'A6\'E3\'81\'8C\'E8\'A8\'AD\'E5\'AE\'9A\'E3\'81\'95\'E3\'82\'8C\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F!!!\\n\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'82\'92\'E4\'BD\'BF\'E7\'94\'A8\'E3\'81\'A7\'E3\'81\'8D\'E3\'81\'BE\'E3\'81\'99\\n"})\par
01280                         getImg({\cf22 'assets/banner.png'}, {\cf22 'banner'}, 0, 0, screensize[0], int((round((322/1736)*screensize[0], 0))))\par
01281                     history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + {\cf22 '*logged]\\n'})\par
01282                     history.close()\par
01283                     history = open(historyname, {\cf22 'a'})\par
01284                     Thread(target=delcache, args=(loginvstupuser,historyname,), daemon={\cf17 True}).start()\par
01285                     {\cf19 continue}\par
01286                 {\cf22 """}\par
01287 {\cf22                 If the password }{\cf19 is} incorrect, remove the encrypted password file {\cf19 and} the password file itself.\par
01288                 {\cf21 @param} vstup - the user input password\par
01289                 {\cf21 @param} password - the password {\cf17 from} the encrypted file\par
01290                 {\cf21 @param} loginvstupuser - the user input username\par
01291                 {\cf21 @param} topassword - the boolean value {\cf19 for} {\cf19 if} the password {\cf19 is} correct\par
01292                 {\cf22 """}\par
01293 {\cf22                 }{\cf19 if} vstup != password[0]:  {\cf20 # type: ignore}\par
01294                     topassword = {\cf17 False}\par
01295                     os.remove(loginvstupuser + {\cf22 'crypted'})\par
01296                     os.remove(password[1])  {\cf20 # type: ignore}\par
01297                     {\cf17 global} progress_bar_check\par
01298                     progress_bar_check = 100\par
01299                     sleep(0.1)\par
01300                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01301                         print({\cf22 "ZL\'C9 HESLO"})\par
01302                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01303                         print({\cf22 "WRONG PASSWORD"})\par
01304                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01305                         print({\cf22 '\'E9\'96\'93\'E9\'81\'95\'E3\'81\'A3\'E3\'81\'9F\'E3\'83\'91\'E3\'82\'B9\'E3\'83\'AF\'E3\'83\'BC\'E3\'83\'89'})\par
01306             {\cf22 """}\par
01307 {\cf22                 this function }{\cf19 is} used to get the input {\cf17 from} the user {\cf19 and} write it to the history file.\par
01308             {\cf21 @param} vstup - the input {\cf17 from} the user.\par
01309             {\cf21 @param} history - the history file.\par
01310             {\cf21 @param} linenumber - the line number of the history file.\par
01311             {\cf22 """}\par
01312 {\cf22             }{\cf19 if} {\cf19 not} tologin {\cf19 and} {\cf19 not} logged:\par
01313                 vstup = input(str(linenumber) + {\cf22 ' > '})\par
01314                 history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + vstup + {\cf22 ']\\n'})\par
01315                 vstup.lower()\par
01316                 history.close()\par
01317                 history = open(historyname, {\cf22 'a'})\par
01318                 linenumber += 1\par
01319             inactivelogout = inactive()\par
01320             {\cf22 """}\par
01321 {\cf22             If the user inputs 'delsavlog'} into the command line, delete the saved log files.\par
01322             {\cf22 """}\par
01323 {\cf22             }{\cf19 if} vstup == {\cf22 'delsavlog'}:\par
01324                 subprocess.check_output({\cf22 'start uninstall.py '}, shell={\cf17 True})\par
01325             {\cf22 """}\par
01326 {\cf22             Clear the screen.}\par
01327 {\cf22             }{\cf21 @param} vstup - the input {\cf17 from} the user.\par
01328             {\cf22 """}\par
01329 {\cf22             }{\cf19 if} vstup == {\cf22 'clear'} {\cf19 or} vstup == {\cf22 'cls'}:\par
01330                 os.system({\cf22 'cls'})\par
01331             {\cf19 if} inactivelogout:\par
01332                 restart = {\cf17 True}\par
01333                 exit = {\cf17 True}\par
01334             {\cf22 """}\par
01335 {\cf22             If the user }{\cf19 is} logged {\cf19 in} {\cf19 and} the user types {\cf22 "logout"} {\cf19 in} the command line, log the user out.\par
01336             {\cf21 @param} logged - whether the user {\cf19 is} logged {\cf19 in} {\cf19 or} {\cf19 not}.\par
01337             {\cf21 @param} vstup - the user input.\par
01338             {\cf21 @param} restart - whether the user {\cf19 is} restarting the program {\cf19 or} {\cf19 not}.\par
01339             {\cf21 @param} loginvstupuser - the file that contains the username of the logged {\cf19 in} user.\par
01340             {\cf21 @param} password - the file that contains the password of the logged {\cf19 in} user.\par
01341             {\cf21 @param} args.language - the language of the program.\par
01342             {\cf21 @param} history - the file that contains the history of the user.\par
01343             {\cf21 @param} linenumber - the line number of the history file.\par
01344             {\cf22 """}\par
01345 {\cf22             }{\cf19 if} logged {\cf19 and} vstup == {\cf22 "logout"} {\cf19 and} {\cf19 not} restart:\par
01346                 logged = {\cf17 False}\par
01347                 os.remove(loginvstupuser)\par
01348                 os.remove(password[1])  {\cf20 # type: ignore}\par
01349                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01350                     print({\cf22 "Si odhl\'E1sen\'FD"})\par
01351                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01352                     print({\cf22 "You\\'re logged out"})\par
01353                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01354                     print({\cf22 '\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A2\'E3\'82\'A6\'E3\'83\'88\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F'})\par
01355                 history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + {\cf22 '*logout]\\n'})\par
01356                 history.close()\par
01357                 history = open(historyname, {\cf22 'a'})\par
01358                 {\cf19 continue}\par
01359             {\cf22 """}\par
01360 {\cf22             If the user has logged }{\cf19 in} {\cf19 and} {\cf19 is} inactive {\cf19 for} a long time, log them out.\par
01361             {\cf21 @param} logged - whether the user {\cf19 is} logged {\cf19 in} {\cf19 or} {\cf19 not}.\par
01362             {\cf21 @param} inactivelogout - whether the user {\cf19 is} inactive {\cf19 or} {\cf19 not}.\par
01363             {\cf21 @param} restart - whether the user has restarted the program {\cf19 or} {\cf19 not}.\par
01364             {\cf22 """}\par
01365 {\cf22             }{\cf19 if} logged {\cf19 and} inactivelogout {\cf19 and} restart:\par
01366                 logged = {\cf17 False}\par
01367                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01368                     print({\cf22 "Si odhl\'E1sen\'FD"})\par
01369                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01370                     print({\cf22 "You\\'re logged out"})\par
01371                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01372                     print({\cf22 '\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A2\'E3\'82\'A6\'E3\'83\'88\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F'})\par
01373                 {\cf19 continue}\par
01374             {\cf22 """}\par
01375 {\cf22             If the user }{\cf19 is} {\cf19 not} logged {\cf19 in}, {\cf19 print} an error message {\cf19 and} {\cf19 continue}.           \par
01376             {\cf22 """}\par
01377 {\cf22             }{\cf19 if} {\cf19 not} logged {\cf19 and} vstup == {\cf22 "logout"} {\cf19 or} inactivelogout:\par
01378                 logged = {\cf17 False}\par
01379                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01380                     print({\cf22 'Nie si prihl\'E1sen\'FD!!!'})\par
01381                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01382                     print({\cf22 "You\\'re not logged in!!!"})\par
01383                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01384                     print({\cf22 '\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'9B\'E3\'82\'93!!!'})\par
01385                 {\cf19 continue}\par
01386             {\cf22 """}\par
01387 {\cf22             Check }{\cf19 if} the user wants to quit the program. If so, exit the program. Otherwise, {\cf19 continue}.\par
01388             {\cf21 @param} vstup - the user input {\cf19 for} quitting the program.\par
01389             {\cf21 @returns} {\cf17 True} {\cf19 if} the user wants to quit the program, {\cf17 False} otherwise.\par
01390             {\cf22 """}\par
01391 {\cf22             }{\cf19 if} vstup == {\cf22 'quit'} {\cf19 or} vstup == {\cf22 'koniec'} {\cf19 or} vstup == {\cf22 'end'}:\par
01392                 exit = {\cf17 True}\par
01393                 {\cf19 continue}\par
01394             history = open(historyname, {\cf22 'a'})\par
01395             {\cf22 """}\par
01396 {\cf22             Print the help file }{\cf19 for} the advanced help menu.\par
01397             {\cf21 @param} vstup - the input {\cf17 from} the user during the advanced help menu.\par
01398             {\cf21 @param} restart - whether the program {\cf19 is} restarting.\par
01399             {\cf22 """}\par
01400 {\cf22             }{\cf19 if} vstup != {\cf22 ""} {\cf19 and} {\cf19 not} restart:\par
01401                 {\cf19 for} i {\cf19 in} range(len(advhelp)):\par
01402                     {\cf19 if} vstup == advhelp[i]:\par
01403                         advhelpcont = {\cf17 False}\par
01404                         advhelpfile = open({\cf22 'Help.txt'}, {\cf22 'r'}, encoding={\cf22 'UTF-8'})\par
01405                         {\cf19 for} i {\cf19 in} advhelpfile.readlines():\par
01406                             {\cf19 if} advhelpcont:\par
01407                                 {\cf19 for} j {\cf19 in} language:\par
01408                                     {\cf19 if} i == j + {\cf22 '\\n'}:\par
01409                                         {\cf19 if} j == args.language:\par
01410                                             {\cf19 break}\par
01411                                         {\cf19 else}:\par
01412                                             advhelpcont = {\cf17 False}\par
01413                                             {\cf19 break}\par
01414                                 {\cf19 if} {\cf19 not} advhelpcont:\par
01415                                     {\cf19 break}\par
01416                                 {\cf19 if} i == {\cf22 ""}:\par
01417                                     {\cf19 continue}\par
01418                                 print(i,end={\cf22 ""})\par
01419                                 {\cf19 continue}\par
01420                             {\cf19 if} i == args.language + {\cf22 '\\n'}:\par
01421                                 advhelpcont = {\cf17 True}\par
01422                                 print(i,end={\cf22 ""})\par
01423                                 {\cf19 continue}\par
01424                         advhelpfile.close()\par
01425                 {\cf19 for} i {\cf19 in} range(len(help)):\par
01426                     {\cf19 if} vstup == help[i]:\par
01427                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01428                             print({\cf22 "'login' pre prihl\'C3\'A1senie\\n'logout' pre odhl\'C3\'A1senie\\n'quit' alebo 'koniec' pre koniec\\n'delsavlog' pre vymazanie autoprihlasenia\\n\\nKe\'C4\'8F chce\'C5\'A1 zmeni\'C5\'A5 jazyk programu v terminalu do commandu pridaj '-lang EN' or '-lang SK'\\n\\nPre podrobnej\'C5\'A1iu pomoc nap\'C3\'AD\'C5\'A1 '-ah' alebo '-advanced help' alebo 'ah' alebo 'advanced help'\\n'history' zobrazuje va\'C5\'A1u aktu\'C3\'A1lne ulo\'C5\'BEen\'C3\'BA hist\'C3\'B3riu"})\par
01429                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01430                             print({\cf22 "'login' for login\\n'logout' for logout\\n'quit' or 'end' for end\\n'delsavlog' to clear autologin\\n\\nWhen you want to change the language of the program in the terminal, add '-lang EN' or '-lang SK' to the command\\n\\nFor more detailed help, type '-ah' or '-advanced help' or 'ah' or 'advanced help'\\n'history' show your currently saved history"})\par
01431                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01432                             print({\cf22 "\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'81\'AE\'E5\'A0\'B4\'E5\'90\'88\'E3\'81\'AF\'E3\'80\'8Clogin\'E3\'80\'8D\\n\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A2\'E3\'82\'A6\'E3\'83\'88\'E3\'81\'AE\'E5\'A0\'B4\'E5\'90\'88\'E3\'81\'AF\'E3\'80\'8Clogout\'E3\'80\'8D\\n\'E7\'B5\'82\'E4\'BA\'86\'E3\'81\'AE\'E5\'A0\'B4\'E5\'90\'88\'E3\'81\'AF\'E3\'80\'8Cquit\'E3\'80\'8D\'E3\'81\'BE\'E3\'81\'9F\'E3\'81\'AF\'E3\'80\'8Cend\'E3\'80\'8D\\n\'E8\'87\'AA\'E5\'8B\'95\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'82\'92\'E3\'82\'AF\'E3\'83\'AA\'E3\'82\'A2\'E3\'81\'99\'E3\'82\'8B\'E3\'80\'8Cdelsavlog\'E3\'80\'8D\\n\\n\'E3\'82\'BF\'E3\'83\'BC\'E3\'83\'9F\'E3\'83\'8A\'E3\'83\'AB\'E3\'81\'A7\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'81\'AE\'E8\'A8\'80\'E8\'AA\'9E\'E3\'82\'92\'E5\'A4\'89\'E6\'9B\'B4\'E3\'81\'99\'E3\'82\'8B\'E5\'A0\'B4\'E5\'90\'88\'E3\'81\'AF\'E3\'80\'81\'E3\'80\'8C-lang EN\'E3\'80\'8D\'E3\'81\'BE\'E3\'81\'9F\'E3\'81\'AF\'E3\'80\'8C-lang\'E3\'80\'8D\'E3\'82\'92\'E8\'BF\'BD\'E5\'8A\'A0\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99 \'E3\'82\'B3\'E3\'83\'9E\'E3\'83\'B3\'E3\'83\'89\'E3\'81\'AB SK'\\n\\n\'E8\'A9\'B3\'E7\'B4\'B0\'E3\'81\'AA\'E3\'83\'98\'E3\'83\'AB\'E3\'83\'97\'E3\'82\'92\'E8\'A1\'A8\'E7\'A4\'BA\'E3\'81\'99\'E3\'82\'8B\'E3\'81\'AB\'E3\'81\'AF\'E3\'80\'81'-ah' \'E3\'81\'BE\'E3\'81\'9F\'E3\'81\'AF '-advanced help' \'E3\'81\'BE\'E3\'81\'9F\'E3\'81\'AF 'ah' \'E3\'81\'BE\'E3\'81\'9F\'E3\'81\'AF 'advanced help' \'E3\'81\'A8\'E5\'85\'A5\'E5\'8A\'9B\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'8F\'E3\'81\'A0\'E3\'81\'95\'E3\'81\'84'\\n\'E3\'80\'8Chistory\'E3\'80\'8D\'E3\'81\'AF\'E3\'80\'81\'E7\'8F\'BE\'E5\'9C\'A8\'E4\'BF\'9D\'E5\'AD\'98\'E3\'81\'95\'E3\'82\'8C\'E3\'81\'A6\'E3\'81\'84\'E3\'82\'8B\'E5\'B1\'A5\'E6\'AD\'B4\'E3\'82\'92\'E8\'A1\'A8\'E7\'A4\'BA\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99"})\par
01433                         {\cf19 continue}\par
01434                 {\cf22 """}\par
01435 {\cf22                 Print the history of the user.}\par
01436 {\cf22                 }{\cf21 @param} args - the command line arguments\par
01437                 {\cf22 """}\par
01438 {\cf22                 }{\cf19 if} vstup == {\cf22 'history'}:\par
01439                     historylist = config.items({\cf22 'user history'})\par
01440                     {\cf19 for} i {\cf19 in} historylist:\par
01441                         {\cf19 if} args.language == {\cf22 'SK'}:\par
01442                             print({\cf22 '\'C4\'8Cas za\'C4\'8Diatku = '} + i[1][0:26] + {\cf22 ', \'C4\'8Cas ukon\'C4\'8Denia = '} + i[0] + {\cf22 ', Vstup = '} + i[1][26:])\par
01443                         {\cf19 if} args.language == {\cf22 'EN'}:\par
01444                             print({\cf22 'Start time = '} + i[1][0:26] + {\cf22 ', End time = '} + i[0] + {\cf22 ', Input = '} + i[1][26:])\par
01445                         {\cf19 if} args.language == {\cf22 'JP'}:\par
01446                             print({\cf22 '\'E9\'96\'8B\'E5\'A7\'8B\'E6\'99\'82\'E9\'96\'93 = '} + i[1][0:26] + {\cf22 '\'E3\'80\'81\'E7\'B5\'82\'E4\'BA\'86\'E6\'99\'82\'E9\'96\'93 = '} + i[0] + {\cf22 '\'E3\'80\'81\'E5\'85\'A5\'E5\'8A\'9B = '} + i[1][26:])\par
01447                     {\cf19 if} len(historylist) == 0:\par
01448                         {\cf19 if} args.language == {\cf22 'SK'}:\par
01449                             print({\cf22 'Hist\'F3ria je pr\'E1zdna'})\par
01450                         {\cf19 if} args.language == {\cf22 'EN'}:\par
01451                             print({\cf22 'History is empty'})\par
01452                         {\cf19 if} args.language == {\cf22 'JP'}:\par
01453                             print({\cf22 '\'E5\'B1\'A5\'E6\'AD\'B4\'E3\'81\'8C\'E7\'A9\'BA\'E3\'81\'A7\'E3\'81\'99'})\par
01454                 {\cf19 if} vstup == {\cf22 'login'} {\cf19 and} {\cf19 not} logged {\cf19 or} tologin {\cf19 and} {\cf19 not} logged:\par
01455                     loginvstupuser = {\cf22 ''}\par
01456                     tologin = {\cf17 False}\par
01457                     savefilemode = {\cf17 False}\par
01458                     {\cf22 """}\par
01459 {\cf22                     If the user wants to login, check }{\cf19 if} the user wants to restart the program. If the user wants to restart the program,\par
01460                     set the restart flag to true. If the user does {\cf19 not} want to restart the program, set the restart flag to false.\par
01461                     {\cf21 @param} logins - the number of logins since the last restart.\par
01462                     {\cf21 @param} args - the arguments {\cf17 from} the command line.\par
01463                     {\cf21 @returns} the restart flag {\cf19 and} the exit flag.\par
01464                     {\cf22 """}\par
01465 {\cf22                     }{\cf19 if} logins == 1:\par
01466                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01467                             vstup = input({\cf22 "Ak sa chcete prihl\'C3\'A1si\'C5\'A5, mus\'C3\'ADte re\'C5\'A1tartova\'C5\'A5 program (Y/n) >"})\par
01468                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01469                             vstup = input({\cf22 "If you want to login you need to restart program (Y/n) > "})\par
01470                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01471                             vstup = input({\cf22 "\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'81\'99\'E3\'82\'8B\'E3\'81\'AB\'E3\'81\'AF\'E3\'80\'81\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'82\'92\'E5\'86\'8D\'E8\'B5\'B7\'E5\'8B\'95\'E3\'81\'99\'E3\'82\'8B\'E5\'BF\'85\'E8\'A6\'81\'E3\'81\'8C\'E3\'81\'82\'E3\'82\'8A\'E3\'81\'BE\'E3\'81\'99 (Y/n) >"})\par
01472                         vstup.lower()\par
01473                         {\cf19 if} vstup == {\cf22 "n"}:\par
01474                             {\cf19 continue}\par
01475                         {\cf19 elif} vstup == {\cf22 "y"} {\cf19 or} vstup == {\cf22 ""}:\par
01476                             restart = {\cf17 True}\par
01477                             exit = {\cf17 True}\par
01478                             args.nointro = {\cf18 None}\par
01479                             {\cf19 continue}\par
01480                     {\cf22 """}\par
01481 {\cf22                     Check }{\cf19 if} the save file exists. If it does, ask the user {\cf19 if} they want to auto-login.\par
01482                     {\cf21 @param} savefile - the save file\par
01483                     {\cf21 @returns} the save file mode\par
01484                     {\cf22 """}\par
01485 {\cf22                     }{\cf19 if} os.path.isfile({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"}):\par
01486                         loginvstupuser = {\cf22 ''}\par
01487                         savefile = decode({\cf22 '1'},{\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"},mode=1)\par
01488                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01489                             loginvstupuser = input(str(linenumber) + {\cf22 " Chcete sa automaticky prihl\'C3\'A1si\'C5\'A5? (Y/n) > "})\par
01490                             linenumber += 1\par
01491                         {\cf19 elif} args.language == {\cf22 "EN"}:\par
01492                             loginvstupuser = input(str(linenumber) + {\cf22 " Do you want to auto-login? (Y/n) > "})\par
01493                             linenumber += 1\par
01494                         {\cf19 elif} args.language == {\cf22 "JP"}:\par
01495                             loginvstupuser = input(str(linenumber) + {\cf22 " \'E8\'87\'AA\'E5\'8B\'95\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99\'E3\'81\'8B\'EF\'BC\'9F (Y/n) > "})\par
01496                             linenumber += 1\par
01497                         loginvstupuser.lower()\par
01498                         {\cf19 if} loginvstupuser == {\cf22 ""} {\cf19 or} loginvstupuser == {\cf22 "y"}:\par
01499                             savefilemode = {\cf17 True}\par
01500                     {\cf19 if} savefilemode:\par
01501                         loginvstupuser = savefile[0:6]   {\cf20 # type: ignore}\par
01502                     {\cf19 elif} args.language == {\cf22 "SK"}:\par
01503                         loginvstupuser = input(str(linenumber) + {\cf22 " Prihlasovacie \'C4\'8D\'C3\'ADslo (PID) > "})\par
01504                     {\cf19 elif} args.language == {\cf22 "EN"}:\par
01505                         loginvstupuser = input(str(linenumber) + {\cf22 " Login Number (PID) > "})\par
01506                     {\cf19 elif} args.language == {\cf22 "JP"}:\par
01507                         loginvstupuser = input(str(linenumber) + {\cf22 " \'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E7\'95\'AA\'E5\'8F\'B7 (PID) > "})\par
01508                     history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + loginvstupuser + {\cf22 "]\\n"})\par
01509                     history.close()\par
01510                     history = open(historyname, {\cf22 'a'})\par
01511                     linenumber += 1\par
01512                     tologinhelp = {\cf17 False}\par
01513                     {\cf19 if} loginvstupuser == {\cf22 "back"}:\par
01514                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01515                             print({\cf22 'Idem sp\'C3\'A4\'C5\'A5.'})\par
01516                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01517                             print({\cf22 'Going back.'})\par
01518                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01519                             print({\cf22 '\'E6\'88\'BB\'E3\'82\'8B\'E3\'80\'82'})\par
01520                         {\cf19 continue}\par
01521                     {\cf22 """}\par
01522 {\cf22                     If the user types quit }{\cf19 or} koniec, then go back to the main menu. Otherwise, {\cf19 continue}.\par
01523                     {\cf21 @param} loginvstupuser - the user{\cf22 's input for the login/signup menu}\par
01524 {\cf22                     }{\cf21 @returns} the user{\cf22 's input for the login/signup menu}\par
01525 {\cf22                     """}\par
01526 {\cf22                     }{\cf19 if} loginvstupuser == {\cf22 "quit"} {\cf19 or} loginvstupuser == {\cf22 "koniec"}:\par
01527                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01528                             print({\cf22 "Idem sp\'C3\'A4\'C5\'A5 a ukon\'C4\'8Dujem program."})\par
01529                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01530                             print({\cf22 "Going back and exiting the program."})\par
01531                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01532                             print({\cf22 '\'E6\'88\'BB\'E3\'81\'A3\'E3\'81\'A6\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'82\'92\'E7\'B5\'82\'E4\'BA\'86\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99\'E3\'80\'82'})\par
01533                         sleep(0.5)\par
01534                         exit = {\cf17 True}\par
01535                         {\cf19 continue}\par
01536                     help = [{\cf22 'help'},{\cf22 'pomoc'},{\cf22 '-h'},{\cf22 '-help'},{\cf22 '?'},{\cf22 '-?'}]\par
01537                     {\cf19 for} i {\cf19 in} range(len(help)):\par
01538                         {\cf19 if} loginvstupuser == help[i]:\par
01539                             tologinhelp = {\cf17 True}\par
01540                     {\cf19 if} tologinhelp:\par
01541                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01542                             print({\cf22 "'back' pre menu\\n'quit' alebo 'koniec' pre koniec"})\par
01543                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01544                             print({\cf22 "'back' for menu\\n'quit' or 'end' for end"})\par
01545                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01546                             print({\cf22 "\'E3\'83\'A1\'E3\'83\'8B\'E3\'83\'A5\'E3\'83\'BC\'E3\'81\'AE\'E3\'80\'8C\'E6\'88\'BB\'E3\'82\'8B\'E3\'80\'8D\\n 'quit' \'E3\'81\'BE\'E3\'81\'9F\'E3\'81\'AF 'end' \'E3\'81\'A7\'E7\'B5\'82\'E4\'BA\'86"})\par
01547                         tologin = {\cf17 True}\par
01548                         {\cf19 continue}\par
01549                     {\cf19 elif} {\cf19 not} loginvstupuser.isnumeric():\par
01550                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01551                             print({\cf22 'PID neobsahuje p\'EDsmen\'E1 alebo znaky!!!'})\par
01552                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01553                             print({\cf22 'The PID does not contain letters or characters!!!'})\par
01554                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01555                             print({\cf22 'PID \'E3\'81\'AB\'E6\'96\'87\'E5\'AD\'97\'E3\'81\'8C\'E5\'90\'AB\'E3\'81\'BE\'E3\'82\'8C\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'9B\'E3\'82\'93!!!'})\par
01556                         tologin = {\cf17 True}\par
01557                         {\cf19 continue}\par
01558                     {\cf19 if} len(str(loginvstupuser)) == 6:\par
01559                         exit = {\cf17 False}\par
01560                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01561                             Thread(target=progress_bar, args=({\cf22 'Preverujem'}, 3,), daemon={\cf17 True}).start()\par
01562                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01563                             Thread(target=progress_bar, args=({\cf22 'Checking'}, 3,), daemon={\cf17 True}).start()\par
01564                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01565                             Thread(target=progress_bar, args=({\cf22 '\'E3\'83\'81\'E3\'82\'A7\'E3\'83\'83\'E3\'82\'AF\'E4\'B8\'AD'}, 3,), daemon={\cf17 True}).start()\par
01566                         icofind = code(find(decode({\cf17 True}, {\cf17 False})), {\cf17 False})\par
01567                         cv2.destroyAllWindows()\par
01568                         getImg({\cf22 'assets/banner.png'}, {\cf22 'banner'}, 0, 0, screensize[0], int((round((322/1736)*screensize[0], 0))))\par
01569                         {\cf19 if} icofind[0]:\par
01570                             logged = {\cf17 False}\par
01571                             os.remove(loginvstupuser + {\cf22 'crypted'})\par
01572                             progress_bar_check = 100\par
01573                             sleep(0.1)\par
01574                             {\cf19 if} args.language == {\cf22 "SK"}:\par
01575                                 print({\cf22 "ZL\'C9 PID!!!"})\par
01576                             {\cf19 if} args.language == {\cf22 "EN"}:\par
01577                                 print({\cf22 "WRONG PID!!!"})\par
01578                             {\cf19 if} args.language == {\cf22 "JP"}:\par
01579                                 print({\cf22 '\'E9\'96\'93\'E9\'81\'95\'E3\'81\'A3\'E3\'81\'9F PID !!!'})\par
01580                             tologin = {\cf17 True}\par
01581                             {\cf19 continue}\par
01582                         topassword = {\cf17 True}\par
01583                     {\cf19 else}:\par
01584                         {\cf19 if} args.language == {\cf22 "SK"}:\par
01585                             print({\cf22 'PID m\'C3\'A1 byt 6 \'C4\'8D\'C3\'ADsel dlh\'C3\'A9!!!'})\par
01586                         {\cf19 if} args.language == {\cf22 "EN"}:\par
01587                             print({\cf22 'The PID should be 6 numbers long!!!'})\par
01588                         {\cf19 if} args.language == {\cf22 "JP"}:\par
01589                             print({\cf22 'PID \'E3\'81\'AF 6 \'E6\'A1\'81\'E3\'81\'AE\'E9\'95\'B7\'E3\'81\'95\'E3\'81\'A7\'E3\'81\'AA\'E3\'81\'91\'E3\'82\'8C\'E3\'81\'B0\'E3\'81\'AA\'E3\'82\'8A\'E3\'81\'BE\'E3\'81\'9B\'E3\'82\'93!!!'})\par
01590                         tologin = {\cf17 True}\par
01591                 {\cf19 elif} logged {\cf19 and} vstup == {\cf22 'login'}:\par
01592                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01593                         print({\cf22 'U\'9E si prihlasen\'ED!!!'})\par
01594                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01595                         print({\cf22 'You are already logged in!!!'})\par
01596                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01597                         print({\cf22 '\'E3\'81\'99\'E3\'81\'A7\'E3\'81\'AB\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A4\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99\'EF\'BC\'81\'EF\'BC\'81\'EF\'BC\'81'})\par
01598         {\cf19 elif} vstup == {\cf22 'quit'} {\cf19 or} vstup == {\cf22 'koniec'} {\cf19 or} vstup == {\cf22 'end'} {\cf19 or} exit:\par
01599             {\cf19 try}:\par
01600                 open({\cf22 'END'}, {\cf22 'x'})\par
01601             {\cf19 except} Exception:\par
01602                 {\cf19 pass}\par
01603             {\cf19 if} logged:\par
01604                 {\cf19 try}:\par
01605                     sleep(0.25)\par
01606                     os.remove(loginvstupuser)\par
01607                     os.remove(password[1])  {\cf20 # type: ignore}\par
01608                 {\cf19 except} Exception:\par
01609                     {\cf19 pass}\par
01610                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01611                     print({\cf22 "\\nSi odhl\'E1sen\'FD\\n"})\par
01612                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01613                     print({\cf22 '\\nYou are logged out\\n'})\par
01614                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01615                     print({\cf22 '\\n\'E3\'83\'AD\'E3\'82\'B0\'E3\'82\'A2\'E3\'82\'A6\'E3\'83\'88\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'97\'E3\'81\'9F\\n'})\par
01616                 history.write({\cf22 '['} + str(linenumber) + {\cf22 ', '} + {\cf22 '*logout]\\n'})\par
01617                 history.close()\par
01618                 history = open(historyname, {\cf22 'a'})\par
01619                 loginvstupuser = {\cf22 ''}\par
01620                 sleep(0.5)\par
01621             history.close()\par
01622             {\cf19 if} args.language == {\cf22 "SK"}:\par
01623                 print({\cf22 "ODSTRA\'C5\'87OVANIE NEPOTREBN\'C3\'9DCH S\'C3\'9ABOROV\\n\\nP\'C3\'ADsanie hist\'C3\'B3rie\\n"})\par
01624             {\cf19 if} args.language == {\cf22 "EN"}:\par
01625                 print({\cf22 "DELETING UNNECESSARY FILES\\n\\nWriting history\\n"})\par
01626             {\cf19 if} args.language == {\cf22 "JP"}:\par
01627                 print({\cf22 '\'E4\'B8\'8D\'E8\'A6\'81\'E3\'81\'AA\'E3\'83\'95\'E3\'82\'A1\'E3\'82\'A4\'E3\'83\'AB\'E3\'82\'92\'E5\'89\'8A\'E9\'99\'A4\'E3\'81\'97\'E3\'81\'A6\'E3\'81\'84\'E3\'81\'BE\'E3\'81\'99\\n\\n\'E5\'9F\'B7\'E7\'AD\'86\'E5\'B1\'A5\'E6\'AD\'B4\\n'})\par
01628             start = time.time()\par
01629             sleep(0.25)\par
01630             version = open({\cf22 'version'}, {\cf22 'r'})\par
01631             versionlist = version.readlines()[0].split({\cf22 '.'})\par
01632             version.close()\par
01633             version = open({\cf22 'version'}, {\cf22 'w'})\par
01634             version.write(versionlist[0] + {\cf22 '.'} + versionlist[1] + {\cf22 '.'} + versionlist[2] + {\cf22 '.'} + str(datetime.today().strftime({\cf22 "%Y%m%d.%H%M%S"})))\par
01635             version.close()\par
01636             os.remove({\cf22 'config.ini'})\par
01637             historylist = []\par
01638             history = open(historyname, {\cf22 'r'})\par
01639             configfile = open({\cf22 'config.ini'}, {\cf22 'a'})\par
01640             {\cf19 for} i {\cf19 in} history.readlines():\par
01641                 historylist.append(i.strip({\cf22 '\\n'}))\par
01642             config.set({\cf22 'user history'}, historyname, str(datetime.today().strftime({\cf22 "%d-%m-%Y__time__%H-%M-%S"})) + str(historylist))\par
01643             config.write(configfile)\par
01644             configfile.close()\par
01645             history.close()\par
01646             configfile.close()\par
01647             os.remove(historyname)\par
01648             {\cf19 if} args.language == {\cf22 "SK"}:\par
01649                 print({\cf22 "Hotovo\\n"})\par
01650             {\cf19 if} args.language == {\cf22 "EN"}:\par
01651                 print({\cf22 "Done\\n"})\par
01652             {\cf19 if} args.language == {\cf22 "JP"}:\par
01653                 print({\cf22 '\'E7\'B5\'82\'E3\'82\'8F\'E3\'82\'8A\\n'})\par
01654             playhtml({\cf22 'apphtml\\\\end'}, 1, 3)\par
01655             {\cf19 try}:\par
01656                 os.remove({\cf22 'data_backup'})\par
01657             {\cf19 except} Exception:\par
01658                 {\cf19 pass}\par
01659             print({\cf22 '.'}, end={\cf22 '\\r'})\par
01660             sleep(0.2)\par
01661             {\cf19 try}:\par
01662                 os.mkdir({\cf22 'datafolder'})\par
01663             {\cf19 except} FileExistsError:\par
01664                 {\cf19 pass}\par
01665             sleep(0.2)\par
01666             shutil.move({\cf22 'data'}, {\cf22 'datafolder/'})\par
01667             sleep(0.2)\par
01668             {\cf19 if} args.language == {\cf22 "SK"}:\par
01669                 print({\cf22 "ZABA\'C4\'BDUJEM DATA\\n"})\par
01670                 sleep(0.2)\par
01671                 subprocess.call([sys.executable, {\cf22 'xp3.py'}, {\cf22 'datafolder'}, {\cf22 'data.xp3'}, {\cf22 '-mode'}, {\cf22 'repack'}, {\cf22 '-e'}, {\cf22 'neko_vol0_steam'}])\par
01672             {\cf19 if} args.language == {\cf22 "EN"}:\par
01673                 print({\cf22 "PACKING DATA\\n"})\par
01674                 sleep(0.2)\par
01675                 subprocess.call([sys.executable, {\cf22 'xp3.py'}, {\cf22 'datafolder'}, {\cf22 'data.xp3'}, {\cf22 '-mode'}, {\cf22 'repack'}, {\cf22 '-e'}, {\cf22 'neko_vol0_steam'}, {\cf22 '-lang'}, {\cf22 'EN'}])\par
01676             {\cf19 if} args.language == {\cf22 "JP"}:\par
01677                 print({\cf22 "\'E6\'A2\'B1\'E5\'8C\'85\'E3\'83\'87\'E3\'83\'BC\'E3\'82\'BF\\n"})\par
01678                 sleep(0.2)\par
01679                 subprocess.call([sys.executable, {\cf22 'xp3.py'}, {\cf22 'datafolder'}, {\cf22 'data.xp3'}, {\cf22 '-mode'}, {\cf22 'repack'}, {\cf22 '-e'}, {\cf22 'neko_vol0_steam'}, {\cf22 '-lang'}, {\cf22 'JP'}])\par
01680             shutil.rmtree({\cf22 'datafolder'})\par
01681             {\cf19 if} args.language == {\cf22 "SK"}:\par
01682                 print({\cf22 "HOTOVO\\n"})\par
01683                 sleep(0.5)\par
01684                 cv2.destroyAllWindows()\par
01685                 print({\cf22 "ZABA\'C4\'BDUJEM DRUH\'C3\'9A \'C4\'8CAS\'C5\'A4 DATA\\n"})\par
01686             {\cf19 if} args.language == {\cf22 "EN"}:\par
01687                 print({\cf22 "COMPLETE\\n"})\par
01688                 sleep(0.5)\par
01689                 cv2.destroyAllWindows()\par
01690                 print({\cf22 "PACKING SECOND PART OF DATA\\n"})\par
01691             {\cf19 if} args.language == {\cf22 "JP"}:\par
01692                 print({\cf22 "\'E5\'AE\'8C\'E4\'BA\'86\\n"})\par
01693                 sleep(0.5)\par
01694                 cv2.destroyAllWindows()\par
01695                 print({\cf22 "\'E3\'83\'87\'E3\'83\'BC\'E3\'82\'BF\'E3\'81\'AE 2 \'E7\'95\'AA\'E7\'9B\'AE\'E3\'81\'AE\'E9\'83\'A8\'E5\'88\'86\'E3\'81\'AE\'E3\'83\'91\'E3\'83\'83\'E3\'82\'AD\'E3\'83\'B3\'E3\'82\'B0\\n"})\par
01696             zipfiles = [{\cf22 'tests.py'}, {\cf22 'xp3.py'}, {\cf22 'xp3reader.py'}, {\cf22 'xp3writer.py'}, {\cf22 'data.xp3'}]\par
01697             zipfileswopath = [{\cf22 'tests.py'}, {\cf22 'xp3.py'}, {\cf22 'xp3reader.py'}, {\cf22 'xp3writer.py'}, {\cf22 'data.xp3'}]\par
01698             folders = [{\cf22 'structs'}, {\cf22 'assets'}, {\cf22 'apphtml'}]\par
01699             {\cf19 for} i {\cf19 in} range(0, len(folders)):\par
01700                 {\cf19 for} path, directories, files {\cf19 in} os.walk(folders[i]):\par
01701                     {\cf19 for} file {\cf19 in} files:\par
01702                         file_name = os.path.join(path, file)\par
01703                         zipfiles.append(file_name)\par
01704                         zipfileswopath.append(file)\par
01705             {\cf17 with} zipfile.ZipFile(cachename, mode={\cf22 'w'}, compresslevel=5) {\cf17 as} zip:\par
01706                 zip_kb_old = 0\par
01707                 zipfilesnumber = len(zipfiles)\par
01708                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01709                     bar = tqdm(range(0, len(zipfiles)), desc={\cf22 "Zaba\'C4\'BEujem "})\par
01710                     {\cf19 for} i {\cf19 in} bar:\par
01711                         zip.write(zipfiles[i])\par
01712                         size = sum([zinfo.file_size {\cf19 for} zinfo {\cf19 in} zip.filelist])\par
01713                         sleep(0.02)\par
01714                         tqdm.write(zipfileswopath[i] + {\cf22 "("} + str(os.path.getsize(zipfiles[i])) + {\cf22 " KB) -> "} + str(round(size - zip_kb_old,2)) + {\cf22 " KB"})\par
01715                         zip_kb_old = size\par
01716                         os.remove(zipfiles[i])\par
01717                         {\cf19 if} i == len(zipfiles)-1:\par
01718                             tqdm.write({\cf22 "\\n"})\par
01719                     size = sum([zinfo.file_size {\cf19 for} zinfo {\cf19 in} zip.filelist])\par
01720                     tqdm.write({\cf22 "\\nZabalen\'E9 data maj\'FA > "} + str(size)+ {\cf22 " KB"})\par
01721                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01722                     bar = tqdm(range(0, len(zipfiles)), desc={\cf22 "Packing "})\par
01723                     {\cf19 for} i {\cf19 in} bar:\par
01724                         zip.write(zipfiles[i])\par
01725                         size = sum([zinfo.file_size {\cf19 for} zinfo {\cf19 in} zip.filelist])\par
01726                         sleep(0.02)\par
01727                         tqdm.write(zipfileswopath[i] + {\cf22 "("} + str(os.path.getsize(zipfiles[i])) + {\cf22 " KB) -> "} + str(round(size - zip_kb_old,2)) + {\cf22 " KB"})\par
01728                         zip_kb_old = size\par
01729                         os.remove(zipfiles[i])\par
01730                         {\cf19 if} i == len(zipfiles)-1:\par
01731                             tqdm.write({\cf22 "\\n"})\par
01732                     size = sum([zinfo.file_size {\cf19 for} zinfo {\cf19 in} zip.filelist])\par
01733                     tqdm.write({\cf22 "\\nPacked data have > "} + str(size)+ {\cf22 " KB"})\par
01734                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01735                     bar = tqdm(range(0, len(zipfiles)), desc={\cf22 "\'E6\'A2\'B1\'E5\'8C\'85 "})\par
01736                     {\cf19 for} i {\cf19 in} bar:\par
01737                         zip.write(zipfiles[i])\par
01738                         size = sum([zinfo.file_size {\cf19 for} zinfo {\cf19 in} zip.filelist])\par
01739                         sleep(0.02)\par
01740                         tqdm.write(zipfileswopath[i] + {\cf22 "("} + str(os.path.getsize(zipfiles[i])) + {\cf22 " KB) -> "} + str(round(size - zip_kb_old,2)) + {\cf22 " KB"})\par
01741                         zip_kb_old = size\par
01742                         os.remove(zipfiles[i])\par
01743                         {\cf19 if} i == len(zipfiles)-1:\par
01744                             tqdm.write({\cf22 "\\n"})\par
01745                     size = sum([zinfo.file_size {\cf19 for} zinfo {\cf19 in} zip.filelist])\par
01746                     tqdm.write({\cf22 "\\n\'E3\'83\'91\'E3\'83\'83\'E3\'82\'AF\'E3\'81\'95\'E3\'82\'8C\'E3\'81\'9F\'E3\'83\'87\'E3\'83\'BC\'E3\'82\'BF\'E3\'81\'AF > "} + str(size)+ {\cf22 " KB"})\par
01747                 zip.close()\par
01748             {\cf19 for} i {\cf19 in} range(0, len(folders)):\par
01749                 shutil.rmtree(folders[i])\par
01750             sleep(0.2)\par
01751             {\cf19 if} args.language == {\cf22 "SK"}:\par
01752                 print({\cf22 "\\nHOTOVO\\n"})\par
01753             {\cf19 if} args.language == {\cf22 "EN"}:\par
01754                 print({\cf22 "\\nCOMPLETE\\n"})\par
01755             {\cf19 if} args.language == {\cf22 "JP"}:\par
01756                 print({\cf22 '\\n\'E6\'9C\'AA\'E5\'AE\'8C\'E4\'BA\'86\\n'})\par
01757             end = time.time()\par
01758             sleep(0.2)\par
01759             {\cf19 if} args.language == {\cf22 "SK"}:\par
01760                 print({\cf22 'Uplynut\'C3\'BD \'C4\'8Das balenia: '} + str(end-start-1.75-zipfilesnumber*0.02) + {\cf22 '\\n'})\par
01761             {\cf19 if} args.language == {\cf22 "EN"}:\par
01762                 print({\cf22 'Elapsed time of packing: '} + str(end-start-1.75-zipfilesnumber*0.02) + {\cf22 '\\n'})\par
01763             {\cf19 if} args.language == {\cf22 "JP"}:\par
01764                 print({\cf22 '\'E6\'A2\'B1\'E5\'8C\'85\'E7\'B5\'8C\'E9\'81\'8E\'E6\'99\'82\'E9\'96\'93: '} + str(end-start-1.75-zipfilesnumber*0.02) + {\cf22 '\\n'})\par
01765             sleep(0.5)\par
01766             {\cf19 if} restart:\par
01767                 {\cf19 if} args.language == {\cf22 "SK"}:\par
01768                     print({\cf22 'Program sa automaticky re\'9Atartuje.'})\par
01769                 {\cf19 if} args.language == {\cf22 "EN"}:\par
01770                     print({\cf22 'The program will restart automatically.'})\par
01771                 {\cf19 if} args.language == {\cf22 "JP"}:\par
01772                     print({\cf22 '\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'81\'8C\'E8\'87\'AA\'E5\'8B\'95\'E7\'9A\'84\'E3\'81\'AB\'E5\'86\'8D\'E8\'B5\'B7\'E5\'8B\'95\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99\'E3\'80\'82'})\par
01773             {\cf19 elif} {\cf19 not} restart:\par
01774                 {\cf19 if} args.endf == {\cf18 None}:\par
01775                     {\cf19 pass}\par
01776                 {\cf19 else}:\par
01777                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01778                         print({\cf22 'Program sa automaticky vypne.'})\par
01779                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01780                         print({\cf22 'The program will automatically shut down.'})   \par
01781                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01782                         print({\cf22 '\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'81\'AF\'E8\'87\'AA\'E5\'8B\'95\'E7\'9A\'84\'E3\'81\'AB\'E3\'82\'B7\'E3\'83\'A3\'E3\'83\'83\'E3\'83\'88\'E3\'83\'80\'E3\'82\'A6\'E3\'83\'B3\'E3\'81\'97\'E3\'81\'BE\'E3\'81\'99\'E3\'80\'82'})\par
01783             sleep(0.5)\par
01784             {\cf19 if} args.endf != {\cf18 None} {\cf19 and} {\cf19 not} restart:\par
01785                 sleep(2.5)\par
01786             {\cf19 if} restart:\par
01787                 crrestart = open({\cf22 "restart.py"}, {\cf22 "w"})\par
01788                 crrestart.write(restartapp)\par
01789                 crrestart.close()\par
01790                 os.remove({\cf22 'END'})\par
01791                 {\cf19 if} os.path.isfile({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"}):\par
01792                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01793                         print({\cf22 "!\\n!!\\n!!!\\nUPOZORNENIE\\n\'C4\'8CAKAJTE, K\'C3\'9DM V\'C3\'81M PROGRAM POVIE \'C5\'BDE M\'C3\'94\'C5\'BDETE\\n!!!\\n!!\\n!\\n"})\par
01794                     {\cf19 elif} args.language == {\cf22 "EN"}:\par
01795                         print({\cf22 "!\\n!!\\n!!!\\nWARNING\\nWAIT UNTIL PROGRAM SAYS YOU CAN\\n!!!\\n!!\\n!\\n"})\par
01796                     {\cf19 elif} args.language == {\cf22 "JP"}:\par
01797                         print({\cf22 "!\\n!!\\n!!!\\n\'E8\'AD\'A6\'E5\'91\'8A\\n\'E3\'83\'97\'E3\'83\'AD\'E3\'82\'B0\'E3\'83\'A9\'E3\'83\'A0\'E3\'81\'8C\'E3\'81\'A7\'E3\'81\'8D\'E3\'82\'8B\'E3\'81\'A8\'E8\'A8\'80\'E3\'81\'86\'E3\'81\'BE\'E3\'81\'A7\'E5\'BE\'85\'E3\'81\'A3\'E3\'81\'A6\'E3\'81\'8F\'E3\'81\'A0\'E3\'81\'95\'E3\'81\'84\\n!!!\\n!!\\n!\\n"})\par
01798                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01799                         vstup = input({\cf22 "Rozumiete (Y/n) > "})\par
01800                     {\cf19 elif} args.language == {\cf22 "EN"}:\par
01801                         vstup = input({\cf22 "Do you understand (Y/n) > "})\par
01802                     {\cf19 elif} args.language == {\cf22 "JP"}:\par
01803                         vstup = input({\cf22 "\'E3\'82\'8F\'E3\'81\'8B\'E3\'82\'8A\'E3\'81\'BE\'E3\'81\'99\'E3\'81\'8B (Y/n) >"})\par
01804                     vstup.lower()\par
01805                     {\cf19 if} vstup == {\cf22 "n"}:\par
01806                         {\cf19 if} os.path.isfile({\cf22 "restart.py"}):\par
01807                             os.remove({\cf22 "restart.py"})\par
01808                         quit()\par
01809                     {\cf19 elif} vstup {\cf19 in} [{\cf22 ''},{\cf22 'y'}]:\par
01810                         os.system({\cf22 'cls'})\par
01811                         sys.stdout.flush()\par
01812                         {\cf19 if} os.path.isfile({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"}):\par
01813                             subprocess.check_output({\cf22 'start restart.py --autol'}, shell={\cf17 True})\par
01814                             sys.stdout.flush()\par
01815                         subprocess.check_output({\cf22 'start edupage.py --nointrof -lang '} + args.language, shell={\cf17 True})\par
01816                         sys.stdout.flush()\par
01817                         quit()\par
01818                 {\cf19 else}:\par
01819                     os.system({\cf22 'cls'})\par
01820                     sys.stdout.flush()\par
01821                     subprocess.check_output({\cf22 'start restart.py'}, shell={\cf17 True})\par
01822                     sys.stdout.flush()\par
01823                     subprocess.check_output({\cf22 'start edupage.py --nointrof -lang '} + args.language, shell={\cf17 True})\par
01824                     sys.stdout.flush()\par
01825                     quit()\par
01826             {\cf19 elif} {\cf19 not} restart:\par
01827                 os.remove({\cf22 'END'})\par
01828                 {\cf19 if} args.endf == {\cf18 None}:\par
01829                     {\cf19 if} args.language == {\cf22 "SK"}:\par
01830                         input(str(linenumber) + {\cf22 " 'ENTER' NA KONIEC"})\par
01831                     {\cf19 if} args.language == {\cf22 "EN"}:\par
01832                         input(str(linenumber) + {\cf22 " 'ENTER' TO END"})  \par
01833                     {\cf19 if} args.language == {\cf22 "JP"}:\par
01834                         input(str(linenumber) + {\cf22 " \'E3\'80\'8CENTER\'E3\'80\'8D\'E3\'81\'A7\'E7\'B5\'82\'E4\'BA\'86"})\par
01835                     quit()\par
01836                 {\cf19 else}:\par
01837                     {\cf19 if} os.path.exists({\cf22 'restart.py'}):\par
01838                         os.remove({\cf22 'restart.py'})\par
01839                     quit()\par
01840 \par
01841 {\cf19 if} {\cf22 '__main__'} == __name__:\par
01842     main()\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md File Reference\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
uninstall.py File Reference\par \pard\plain 
{\tc\tcl2 \v uninstall.py}
{\xe \v uninstall.py}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Namespaces\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b uninstall}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
uninstall.py\par \pard\plain 
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
Go to the documentation of this file.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf17 import} os\par
00002 {\cf17 import} shutil\par
00003 {\cf19 if} os.path.isfile({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"}):\par
00004     os.remove({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/saved"})\par
00005     shutil.rmtree({\cf22 "C:/Users/"} + os.getlogin() + {\cf22 "/AppData/Local/Zn\'E1mE/"})\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
